enrich 	CS,
		cindex with 

	constants
		bot : ref;
		deq : ref;
		age : ref;
	
	functions
		INVOP : Proc × IJ → nat × CS × CS → bool;
		COP : Proc × CJ → CS × CS → bool;
		RETOP : Proc × RJ → CS × CS × nat → bool;
	predicates
		CSInit : CS;

	variables
		invop : nat × CS × CS → bool;
		cop : CS × CS → bool;
		retop : CS × CS × nat → bool;
		bot, bot' : ref;
		deq, deq' : ref;
		age, age' : ref;
		inp : nat;
		return : nat;
	axioms
	CSInit : 
	⊦ CSInit(mkcs(bot, deq, age, pcf, mem, natf1, natf2, natf3, natf4, natf5, natf6, natf7, natf8, reff9, natf10, natf11, natf12, reff13, natf14, reff15, natf16, reff17, natf18, natf19, natf20, reff21, natf22, natf23)) ↔ ( bot = ⌜0⌝ ∧ deq = ⌜0⌝ ∧ age = ⌜0⌝ ∧ pcf = (λ p. N)  ∧ natf1 = (λ p. 0) ∧ natf2 = (λ p. 0) ∧ natf3 = (λ p. 0) ∧ natf4 = (λ p. 0) ∧ natf5 = (λ p. 0) ∧ natf6 = (λ p. 0) ∧ natf7 = (λ p. 0) ∧ natf8 = (λ p. 0) ∧ reff9 = (λ p. ⌜0⌝) ∧ natf10 = (λ p. 0) ∧ natf11 = (λ p. 0) ∧ natf12 = (λ p. 0) ∧ reff13 = (λ p. ⌜0⌝) ∧ natf14 = (λ p. 0) ∧ reff15 = (λ p. ⌜0⌝) ∧ natf16 = (λ p. 0) ∧ reff17 = (λ p. ⌜0⌝) ∧ natf18 = (λ p. 0) ∧ natf19 = (λ p. 0) ∧ natf20 = (λ p. 0) ∧ reff21 = (λ p. ⌜0⌝) ∧ natf22 = (λ p. 0) ∧ natf23 = (λ p. 0));
	used for : s, ls;

;; 	pushBottom corresponds to method @pushBottom
	pushBottomini :
	⊦ INVOP(p, pushBottomini)(inp, cs, cs') ↔ cs .pc(p) = N ∧ cs' = cs .pc:= cs.pc(p ; A00) .elem:= cs.elem(p ; inp) ; 
	used for : s, ls;

;; 	popTop corresponds to method @popTop
	popTopini :
	⊦ INVOP(p, popTopini)(inp, cs, cs') ↔ cs .pc(p) = N ∧ cs' = cs .pc:= cs.pc(p ; B00) ; 
	used for : s, ls;

;; 	popBottom corresponds to method @popBottom
	popBottomini :
	⊦ INVOP(p, popBottomini)(inp, cs, cs') ↔ cs .pc(p) = N ∧ cs' = cs .pc:= cs.pc(p ; C00) ; 
	used for : s, ls;


;;	%0 = load i32** @bot, align 4, !tbaa !0
	pushBottom1 :
	⊦ COP(p, pushBottom1)(cs, cs') ↔ cs .pc(p) = A00 ∧ cs' = cs .pc:= cs.pc(p ; A01) .v0:= cs.v0(p ; cs.mem[cs .bot .v]);
	used for : s, ls;

;;	%1 = load i32* %0, align 4, !tbaa !3
	pushBottom2 :
	⊦ COP(p, pushBottom2)(cs, cs') ↔ cs .pc(p) = A01 ∧ cs' = cs .pc:= cs.pc(p ; A02) .v1:= cs.v1(p ; cs.mem[cs .v0(p) .v] .v);
	used for : s, ls;

;;	%2 = load i32** @deq, align 4, !tbaa !0
	pushBottom3 :
	⊦ COP(p, pushBottom3)(cs, cs') ↔ cs .pc(p) = A02 ∧ cs' = cs .pc:= cs.pc(p ; A03) .v2:= cs.v2(p ; cs.mem[cs .deq .v]);
	used for : s, ls;

;;	%idx = getelementptr i32* %2, i32 %1
	pushBottom4 :
	⊦ COP(p, pushBottom4)(cs, cs') ↔ cs .pc(p) = A03 ∧ cs' = cs .pc:= cs.pc(p ; A04) .idx:=cs.idx(p ; ⌜(cs .v2(p) .v + cs.v1(p))⌝) ;
	used for : s, ls;

;;	store i32 %elem, i32* %idx, align 4, !tbaa !3
	pushBottom5 :
	⊦ COP(p, pushBottom5)(cs, cs') ↔ cs .pc(p) = A04 ∧ cs' = cs .pc:= cs.pc(p ; A05idx);
	used for : s, ls;

;;	%inc = add i32 %1, 1
	pushBottom6 :
	⊦ COP(p, pushBottom6)(cs, cs') ↔ cs .pc(p) = A05idx ∧ cs' = cs .pc:= cs.pc(p ; A06idx) .inc:= cs.inc(p ; cs .v1(p) + 1);
	used for : s, ls;

;;	FlushTransition
	pushBottom7 :
	⊦ COP(p, pushBottom7)(cs, cs') ↔ cs .pc(p) = A05idx ∧ cs' = cs .pc:= cs.pc(p ; A05) .mem:= cs.mem[ cs .idx(p) .v ,⌜cs .elem(p)⌝];
	used for : s, ls;

;;	store i32 %inc, i32* %0, align 4, !tbaa !3
	pushBottom8 :
	⊦ COP(p, pushBottom8)(cs, cs') ↔ cs .pc(p) = A06idx ∧ cs' = cs .pc:= cs.pc(p ; A07idxv0);
	used for : s, ls;

;;	FlushTransition
	pushBottom9 :
	⊦ COP(p, pushBottom9)(cs, cs') ↔ cs .pc(p) = A06idx ∧ cs' = cs .pc:= cs.pc(p ; A06) .mem:= cs.mem[ cs .idx(p) .v ,⌜cs .elem(p)⌝];
	used for : s, ls;

;;	%inc = add i32 %1, 1
	pushBottom10 :
	⊦ COP(p, pushBottom10)(cs, cs') ↔ cs .pc(p) = A05 ∧ cs' = cs .pc:= cs.pc(p ; A06) .inc:= cs.inc(p ; cs .v1(p) + 1);
	used for : s, ls;

;;	FlushTransition
	pushBottom11 :
	⊦ COP(p, pushBottom11)(cs, cs') ↔ cs .pc(p) = A07idxv0 ∧ cs' = cs .pc:= cs.pc(p ; A07v0) .mem:= cs.mem[ cs .idx(p) .v ,⌜cs .elem(p)⌝];
	used for : s, ls;

;;	store i32 %inc, i32* %0, align 4, !tbaa !3
	pushBottom12 :
	⊦ COP(p, pushBottom12)(cs, cs') ↔ cs .pc(p) = A06 ∧ cs' = cs .pc:= cs.pc(p ; A07v0);
	used for : s, ls;

;;	FlushTransition
	pushBottom13 :
	⊦ COP(p, pushBottom13)(cs, cs') ↔ cs .pc(p) = A07v0 ∧ cs' = cs .pc:= cs.pc(p ; A07) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .inc(p)⌝];
	used for : s, ls;

;;	%0 = load i32** @age, align 4, !tbaa !0
	popTop1 :
	⊦ COP(p, popTop1)(cs, cs') ↔ cs .pc(p) = B00 ∧ cs' = cs .pc:= cs.pc(p ; B01) .v0:= cs.v0(p ; cs.mem[cs .age .v]);
	used for : s, ls;

;;	%1 = load i32* %0, align 4, !tbaa !3
	popTop2 :
	⊦ COP(p, popTop2)(cs, cs') ↔ cs .pc(p) = B01 ∧ cs' = cs .pc:= cs.pc(p ; B02) .v1:= cs.v1(p ; cs.mem[cs .v0(p) .v] .v);
	used for : s, ls;

;;	%2 = load i32** @bot, align 4, !tbaa !0
	popTop3 :
	⊦ COP(p, popTop3)(cs, cs') ↔ cs .pc(p) = B02 ∧ cs' = cs .pc:= cs.pc(p ; B03) .v2:= cs.v2(p ; cs.mem[cs .bot .v]);
	used for : s, ls;

;;	%3 = load i32* %2, align 4, !tbaa !3
	popTop4 :
	⊦ COP(p, popTop4)(cs, cs') ↔ cs .pc(p) = B03 ∧ cs' = cs .pc:= cs.pc(p ; B04) .v3:= cs.v3(p ; cs.mem[cs .v2(p) .v] .v);
	used for : s, ls;

;;	%shr = ashr i32 %1, 16
	NEEDS ATTENTION !
	popTop5 :
	⊦ COP(p, popTop5)(cs, cs') ↔ cs .pc(p) = B04 ∧ cs' = cs .pc:= cs.pc(p ; B05) ;
	used for : s, ls;

;;	%cmp = icmp ugt i32 %3, %shr _ positive case
	popTop6_t :
	⊦ COP(p, popTop6_t)(cs, cs') ↔ cs .pc(p) = B05 ∧ (cs .v3(p) > cs .shr(p) ∧ cs' = cs .pc:= cs.pc(p; B06) .cmp:= cs.cmp(p ; 0) ;
	used for : s, ls;

;;	%cmp = icmp ugt i32 %3, %shr _ negative case
	popTop6_f :
	⊦ COP(p, popTop6_f)(cs, cs') ↔ cs .pc(p) = B05 ∧ (cs .v3(p) ≤ cs .shr(p) ∧ cs' = cs .pc:= cs.pc(p; B06) .cmp:= cs.cmp(p ; 1)) ;
	used for : s, ls;

;;	br %cmp, label %if.end, label %return
	popTop7 :
	⊦ COP(p, popTop7)(cs, cs') ↔ cs .pc(p) = B06 ∧ cs' = cs .pc:= cs.pc(p ; B07) ∧ cs .cmp(p) = 1;
	used for : s, ls;

;;	br %cmp, label %if.end, label %return
	popTop8 :
	⊦ COP(p, popTop8)(cs, cs') ↔ cs .pc(p) = B06 ∧ cs' = cs .pc:= cs.pc(p ; B15) .retval_0:= cs.retval_0(p ; (0 - 1)) ∧ cs .cmp(p) = 0;
	used for : s, ls;

;;	%4 = load i32** @deq, align 4, !tbaa !0
	popTop9 :
	⊦ COP(p, popTop9)(cs, cs') ↔ cs .pc(p) = B07 ∧ cs' = cs .pc:= cs.pc(p ; B08) .v4:= cs.v4(p ; cs.mem[cs .deq .v]);
	used for : s, ls;

;;	%retval.0 = phi i32 [, %entry][%. , %if.end]
	popTop10 :
	⊦ COP(p, popTop10)(cs, cs') ↔ cs .pc(p) = B15 ∧ cs' = cs .pc:= cs.pc(p ; B16);
	used for : s, ls;

;;	%idx = getelementptr i32* %4, i32 %shr
	popTop11 :
	⊦ COP(p, popTop11)(cs, cs') ↔ cs .pc(p) = B08 ∧ cs' = cs .pc:= cs.pc(p ; B09) .idx:=cs.idx(p ; ⌜(cs .v4(p) .v + cs.shr(p))⌝) ;
	used for : s, ls;

;;	%5 = load i32* %idx, align 4, !tbaa !3
	popTop13 :
	⊦ COP(p, popTop13)(cs, cs') ↔ cs .pc(p) = B09 ∧ cs' = cs .pc:= cs.pc(p ; B10) .v5:= cs.v5(p ; cs.mem[cs .idx(p) .v] .v);
	used for : s, ls;

;;	%add5 = add i32 %1, 65536
	popTop14 :
	⊦ COP(p, popTop14)(cs, cs') ↔ cs .pc(p) = B10 ∧ cs' = cs .pc:= cs.pc(p ; B11) .add5:= cs.add5(p ; cs .v1(p) + 65536);
	used for : s, ls;

;;	%6 = cmpxchg i32* %0, i32 %1, i32 %add5 seq_cst _ positive case
	popTop15_t :
	⊦ COP(p, popTop15_t)(cs, cs') ↔ cs .pc(p) = B11 ∧  cs.mem[cs .v0(p) .v] = ⌜cs .v1(p)⌝ ∧ cs' = cs .pc:= cs.pc(p; B12) .v6:= cs.v6(p ; 1) .mem:= cs.mem[cs .v0(p) .v,⌜cs .add5(p)⌝] ;
	used for : s, ls;

;;	%6 = cmpxchg i32* %0, i32 %1, i32 %add5 seq_cst _ negative case
	popTop15_f :
	⊦ COP(p, popTop15_f)(cs, cs') ↔ cs .pc(p) = B11 ∧  cs.mem[cs .v0(p) .v] ≠ ⌜cs .v1(p)⌝ ∧ cs' = cs .pc:= cs.pc(p; B12) .v6:= cs.v6(p ; 0);
	used for : s, ls;

;;	%7 = icmp eq i32 %6, %1 _ positive case
	popTop16_t :
	⊦ COP(p, popTop16_t)(cs, cs') ↔ cs .pc(p) = B12 ∧ (cs .v6(p) = cs .v1(p)
	) ∧ cs' = cs .pc:= cs.pc(p; B13) .v7:= cs.v7(p ; 1) ;
	used for : s, ls;

;;	%7 = icmp eq i32 %6, %1 _ negative case
	popTop16_f :
	⊦ COP(p, popTop16_f)(cs, cs') ↔ cs .pc(p) = B12 ∧ ¬(cs .v6(p) = cs .v1(p)
	) ∧ cs' = cs .pc:= cs.pc(p; B13) .v7:= cs.v7(p ; 0)) ;
	used for : s, ls;

;;	%. = select i1 %7, i32 %5, i32 -2 _ positive case
	popTop17_t :
	⊦ COP(p, popTop17_t)(cs, cs') ↔ cs .pc(p) = B13 ∧  cs .v7(p)= 1 ∧ cs' = cs .pc:= cs.pc(p; B14) .v_:= cs.v_(p ; cs .v5(p)) ;
	used for : s, ls;

;;	%. = select i1 %7, i32 %5, i32 -2 _ negative case
	popTop17_f :
	⊦ COP(p, popTop17_f)(cs, cs') ↔ cs .pc(p) = B13 ∧  cs .v7(p)≠ 1 ∧ cs' = cs .pc:= cs.pc(p;B14) .v_:= cs.v_(p ; (0 - 2)) ;
	used for : s, ls;

;;	br label %return
	popTop18 :
	⊦ COP(p, popTop18)(cs, cs') ↔ cs .pc(p) = B14 ∧ cs' = cs .pc:= cs.pc(p ; B15) .retval_0:= cs.retval_0(p ; cs .v_(p));
	used for : s, ls;

;;	%0 = load i32** @bot, align 0
	popBottom1 :
	⊦ COP(p, popBottom1)(cs, cs') ↔ cs .pc(p) = C00 ∧ cs' = cs .pc:= cs.pc(p ; C01) .v0:= cs.v0(p ; cs.mem[cs .bot .v]);
	used for : s, ls;

;;	%1 = load i32* %0, align 0
	popBottom2 :
	⊦ COP(p, popBottom2)(cs, cs') ↔ cs .pc(p) = C01 ∧ cs' = cs .pc:= cs.pc(p ; C02) .v1:= cs.v1(p ; cs.mem[cs .v0(p) .v] .v);
	used for : s, ls;

;;	%cmp = icmp eq i32 %1, 0 _ positive case
	popBottom3_t :
	⊦ COP(p, popBottom3_t)(cs, cs') ↔ cs .pc(p) = C02 ∧ (cs .v1(p) = 0
	) ∧ cs' = cs .pc:= cs.pc(p; C03) .cmp:= cs.cmp(p ; 1) ;
	used for : s, ls;

;;	%cmp = icmp eq i32 %1, 0 _ negative case
	popBottom3_f :
	⊦ COP(p, popBottom3_f)(cs, cs') ↔ cs .pc(p) = C02 ∧ ¬(cs .v1(p) = 0
	) ∧ cs' = cs .pc:= cs.pc(p; C03) .cmp:= cs.cmp(p ; 0)) ;
	used for : s, ls;

;;	br %cmp, label %return, label %if.end
	popBottom4 :
	⊦ COP(p, popBottom4)(cs, cs') ↔ cs .pc(p) = C03 ∧ cs' = cs .pc:= cs.pc(p ; C27) .retval_0:= cs.retval_0(p ; (0 - 1)) ∧ cs .cmp(p) = 1;
	used for : s, ls;

;;	br %cmp, label %return, label %if.end
	popBottom5 :
	⊦ COP(p, popBottom5)(cs, cs') ↔ cs .pc(p) = C03 ∧ cs' = cs .pc:= cs.pc(p ; C04) ∧ cs .cmp(p) = 0;
	used for : s, ls;

;;	%retval.0 = phi i32 [, %if.end9][, %entry][%3 , %if.end][%3 , %if.then6]
	popBottom6 :
	⊦ COP(p, popBottom6)(cs, cs') ↔ cs .pc(p) = C27 ∧ cs' = cs .pc:= cs.pc(p ; C28);
	used for : s, ls;

;;	%dec = add i32 %1, -1
	popBottom7 :
	⊦ COP(p, popBottom7)(cs, cs') ↔ cs .pc(p) = C04 ∧ cs' = cs .pc:= cs.pc(p ; C05) .dec:= cs.dec(p ; cs .v1(p) + (0 - 1));
	used for : s, ls;

;;	store i32 %dec, i32* %0, align 0
	popBottom9 :
	⊦ COP(p, popBottom9)(cs, cs') ↔ cs .pc(p) = C05 ∧ cs' = cs .pc:= cs.pc(p ; C06v0);
	used for : s, ls;

;;	%2 = load i32** @deq, align 0
	popBottom10 :
	⊦ COP(p, popBottom10)(cs, cs') ↔ cs .pc(p) = C06v0 ∧ cs' = cs .pc:= cs.pc(p ; C07v0) .v2:= cs.v2(p ; cs.mem[cs .deq .v]);
	used for : s, ls;

;;	FlushTransition
	popBottom11 :
	⊦ COP(p, popBottom11)(cs, cs') ↔ cs .pc(p) = C06v0 ∧ cs' = cs .pc:= cs.pc(p ; C06) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%idx = getelementptr i32* %2, i32 %dec
	popBottom12 :
	⊦ COP(p, popBottom12)(cs, cs') ↔ cs .pc(p) = C07v0 ∧ cs' = cs .pc:= cs.pc(p ; C08v0) .idx:=cs.idx(p ; ⌜(cs .v2(p) .v + cs.dec(p))⌝) ;
	used for : s, ls;

;;	FlushTransition
	popBottom13 :
	⊦ COP(p, popBottom13)(cs, cs') ↔ cs .pc(p) = C07v0 ∧ cs' = cs .pc:= cs.pc(p ; C07) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%2 = load i32** @deq, align 0
	popBottom14 :
	⊦ COP(p, popBottom14)(cs, cs') ↔ cs .pc(p) = C06 ∧ cs' = cs .pc:= cs.pc(p ; C07) .v2:= cs.v2(p ; cs.mem[cs .deq .v]);
	used for : s, ls;

;;	%3 = load i32* %idx, align 0
	popBottom15 :
	⊦ COP(p, popBottom15)(cs, cs') ↔ cs .pc(p) = C08v0 ∧ cs' = cs .pc:= cs.pc(p ; C09v0) .v3:= cs.v3(p ; cs.mem[cs .idx(p) .v] .v);
	used for : s, ls;

;;	FlushTransition
	popBottom16 :
	⊦ COP(p, popBottom16)(cs, cs') ↔ cs .pc(p) = C08v0 ∧ cs' = cs .pc:= cs.pc(p ; C08) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%idx = getelementptr i32* %2, i32 %dec
	popBottom17 :
	⊦ COP(p, popBottom17)(cs, cs') ↔ cs .pc(p) = C07 ∧ cs' = cs .pc:= cs.pc(p ; C08) .idx:=cs.idx(p ; ⌜(cs .v2(p) .v + cs.dec(p))⌝) ;
	used for : s, ls;

;;	%4 = load i32** @age, align 0
	popBottom18 :
	⊦ COP(p, popBottom18)(cs, cs') ↔ cs .pc(p) = C09v0 ∧ cs' = cs .pc:= cs.pc(p ; C10v0) .v4:= cs.v4(p ; cs.mem[cs .age .v]);
	used for : s, ls;

;;	FlushTransition
	popBottom19 :
	⊦ COP(p, popBottom19)(cs, cs') ↔ cs .pc(p) = C09v0 ∧ cs' = cs .pc:= cs.pc(p ; C09) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%3 = load i32* %idx, align 0
	popBottom20 :
	⊦ COP(p, popBottom20)(cs, cs') ↔ cs .pc(p) = C08 ∧ cs' = cs .pc:= cs.pc(p ; C09) .v3:= cs.v3(p ; cs.mem[cs .idx(p) .v] .v);
	used for : s, ls;

;;	%5 = load i32* %4, align 0
	popBottom21 :
	⊦ COP(p, popBottom21)(cs, cs') ↔ cs .pc(p) = C10v0 ∧ cs' = cs .pc:= cs.pc(p ; C11v0) .v5:= cs.v5(p ; cs.mem[cs .v4(p) .v] .v);
	used for : s, ls;

;;	FlushTransition
	popBottom22 :
	⊦ COP(p, popBottom22)(cs, cs') ↔ cs .pc(p) = C10v0 ∧ cs' = cs .pc:= cs.pc(p ; C10) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%4 = load i32** @age, align 0
	popBottom23 :
	⊦ COP(p, popBottom23)(cs, cs') ↔ cs .pc(p) = C09 ∧ cs' = cs .pc:= cs.pc(p ; C10) .v4:= cs.v4(p ; cs.mem[cs .age .v]);
	used for : s, ls;

;;	%shr = ashr i32 %5, 16
	NEEDS ATTENTION !
	popBottom24 :
	⊦ COP(p, popBottom24)(cs, cs') ↔ cs .pc(p) = C11v0 ∧ cs' = cs .pc:= cs.pc(p ; C12v0) ;
	used for : s, ls;

;;	FlushTransition
	popBottom25 :
	⊦ COP(p, popBottom25)(cs, cs') ↔ cs .pc(p) = C11v0 ∧ cs' = cs .pc:= cs.pc(p ; C11) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%5 = load i32* %4, align 0
	popBottom26 :
	⊦ COP(p, popBottom26)(cs, cs') ↔ cs .pc(p) = C10 ∧ cs' = cs .pc:= cs.pc(p ; C11) .v5:= cs.v5(p ; cs.mem[cs .v4(p) .v] .v);
	used for : s, ls;

;;	%cmp1 = icmp ugt i32 %dec, %shr _ positive case
	popBottom27_t :
	⊦ COP(p, popBottom27_t)(cs, cs') ↔ cs .pc(p) = C12v0 ∧ (cs .dec(p) > cs .shr(p) ∧ cs' = cs .pc:= cs.pc(p; C13v0) .cmp1:= cs.cmp1(p ; 0) ;
	used for : s, ls;

;;	%cmp1 = icmp ugt i32 %dec, %shr _ negative case
	popBottom27_f :
	⊦ COP(p, popBottom27_f)(cs, cs') ↔ cs .pc(p) = C12v0 ∧ (cs .dec(p) ≤ cs .shr(p) ∧ cs' = cs .pc:= cs.pc(p; C13v0) .cmp1:= cs.cmp1(p ; 1)) ;
	used for : s, ls;

;;	FlushTransition
	popBottom28 :
	⊦ COP(p, popBottom28)(cs, cs') ↔ cs .pc(p) = C12v0 ∧ cs' = cs .pc:= cs.pc(p ; C12) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%shr = ashr i32 %5, 16
	NEEDS ATTENTION !
	popBottom29 :
	⊦ COP(p, popBottom29)(cs, cs') ↔ cs .pc(p) = C11 ∧ cs' = cs .pc:= cs.pc(p ; C12) ;
	used for : s, ls;

;;	br %cmp1, label %return, label %if.end3
	popBottom30 :
	⊦ COP(p, popBottom30)(cs, cs') ↔ cs .pc(p) = C13v0 ∧ cs' = cs .pc:= cs.pc(p ; C27v0) .retval_0:= cs.retval_0(p ; cs .v3(p)) ∧ cs .cmp1(p) = 1;
	used for : s, ls;

;;	br %cmp1, label %return, label %if.end3
	popBottom31 :
	⊦ COP(p, popBottom31)(cs, cs') ↔ cs .pc(p) = C13v0 ∧ cs' = cs .pc:= cs.pc(p ; C14v0) ∧ cs .cmp1(p) = 0;
	used for : s, ls;

;;	FlushTransition
	popBottom32 :
	⊦ COP(p, popBottom32)(cs, cs') ↔ cs .pc(p) = C13v0 ∧ cs' = cs .pc:= cs.pc(p ; C13) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%cmp1 = icmp ugt i32 %dec, %shr _ positive case
	popBottom33_t :
	⊦ COP(p, popBottom33_t)(cs, cs') ↔ cs .pc(p) = C12 ∧ (cs .dec(p) > cs .shr(p) ∧ cs' = cs .pc:= cs.pc(p; C13) .cmp1:= cs.cmp1(p ; 0) ;
	used for : s, ls;

;;	%cmp1 = icmp ugt i32 %dec, %shr _ negative case
	popBottom33_f :
	⊦ COP(p, popBottom33_f)(cs, cs') ↔ cs .pc(p) = C12 ∧ (cs .dec(p) ≤ cs .shr(p) ∧ cs' = cs .pc:= cs.pc(p; C13) .cmp1:= cs.cmp1(p ; 1)) ;
	used for : s, ls;

;;	%retval.0 = phi i32 [, %if.end9][, %entry][%3 , %if.end][%3 , %if.then6]
	popBottom34 :
	⊦ COP(p, popBottom34)(cs, cs') ↔ cs .pc(p) = C27v0 ∧ cs' = cs .pc:= cs.pc(p ; C28v0);
	used for : s, ls;

;;	FlushTransition
	popBottom35 :
	⊦ COP(p, popBottom35)(cs, cs') ↔ cs .pc(p) = C27v0 ∧ cs' = cs .pc:= cs.pc(p ; C27) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	store i32 0, i32* %0, align 4, !tbaa !3
	popBottom36 :
	⊦ COP(p, popBottom36)(cs, cs') ↔ cs .pc(p) = C14v0 ∧ cs' = cs .pc:= cs.pc(p ; C15v0v0);
	used for : s, ls;

;;	FlushTransition
	popBottom37 :
	⊦ COP(p, popBottom37)(cs, cs') ↔ cs .pc(p) = C14v0 ∧ cs' = cs .pc:= cs.pc(p ; C14) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	br %cmp1, label %return, label %if.end3
	popBottom38 :
	⊦ COP(p, popBottom38)(cs, cs') ↔ cs .pc(p) = C13 ∧ cs' = cs .pc:= cs.pc(p ; C27) .retval_0:= cs.retval_0(p ; cs .v3(p)) ∧ cs .cmp1(p) = 1;
	used for : s, ls;

;;	br %cmp1, label %return, label %if.end3
	popBottom39 :
	⊦ COP(p, popBottom39)(cs, cs') ↔ cs .pc(p) = C13 ∧ cs' = cs .pc:= cs.pc(p ; C14) ∧ cs .cmp1(p) = 0;
	used for : s, ls;

;;	FlushTransition
	popBottom40 :
	⊦ COP(p, popBottom40)(cs, cs') ↔ cs .pc(p) = C28v0 ∧ cs' = cs .pc:= cs.pc(p ; C28) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%and = and i32 %5, 65535
	NEEDS ATTENTION !
	popBottom41 :
	⊦ COP(p, popBottom41)(cs, cs') ↔ cs .pc(p) = C15v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C16v0v0) ;
	used for : s, ls;

;;	FlushTransition
	popBottom42 :
	⊦ COP(p, popBottom42)(cs, cs') ↔ cs .pc(p) = C15v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C15v0) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	store i32 0, i32* %0, align 4, !tbaa !3
	popBottom43 :
	⊦ COP(p, popBottom43)(cs, cs') ↔ cs .pc(p) = C14 ∧ cs' = cs .pc:= cs.pc(p ; C15v0);
	used for : s, ls;

;;	%add = add i32 %and, 1
	popBottom44 :
	⊦ COP(p, popBottom44)(cs, cs') ↔ cs .pc(p) = C16v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C17v0v0) .add:= cs.add(p ; cs .and(p) + 1);
	used for : s, ls;

;;	FlushTransition
	popBottom45 :
	⊦ COP(p, popBottom45)(cs, cs') ↔ cs .pc(p) = C16v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C16v0) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%and = and i32 %5, 65535
	NEEDS ATTENTION !
	popBottom46 :
	⊦ COP(p, popBottom46)(cs, cs') ↔ cs .pc(p) = C15v0 ∧ cs' = cs .pc:= cs.pc(p ; C16v0) ;
	used for : s, ls;

;;	FlushTransition
	popBottom47 :
	⊦ COP(p, popBottom47)(cs, cs') ↔ cs .pc(p) = C15v0 ∧ cs' = cs .pc:= cs.pc(p ; C15) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	%cmp5 = icmp eq i32 %dec, %shr _ positive case
	popBottom48_t :
	⊦ COP(p, popBottom48_t)(cs, cs') ↔ cs .pc(p) = C17v0v0 ∧ (cs .dec(p) = cs .shr(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C18v0v0) .cmp5:= cs.cmp5(p ; 1) ;
	used for : s, ls;

;;	%cmp5 = icmp eq i32 %dec, %shr _ negative case
	popBottom48_f :
	⊦ COP(p, popBottom48_f)(cs, cs') ↔ cs .pc(p) = C17v0v0 ∧ ¬(cs .dec(p) = cs .shr(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C18v0v0) .cmp5:= cs.cmp5(p ; 0)) ;
	used for : s, ls;

;;	FlushTransition
	popBottom49 :
	⊦ COP(p, popBottom49)(cs, cs') ↔ cs .pc(p) = C17v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C17v0) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%add = add i32 %and, 1
	popBottom50 :
	⊦ COP(p, popBottom50)(cs, cs') ↔ cs .pc(p) = C16v0 ∧ cs' = cs .pc:= cs.pc(p ; C17v0) .add:= cs.add(p ; cs .and(p) + 1);
	used for : s, ls;

;;	FlushTransition
	popBottom51 :
	⊦ COP(p, popBottom51)(cs, cs') ↔ cs .pc(p) = C16v0 ∧ cs' = cs .pc:= cs.pc(p ; C16) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	%and = and i32 %5, 65535
	NEEDS ATTENTION !
	popBottom52 :
	⊦ COP(p, popBottom52)(cs, cs') ↔ cs .pc(p) = C15 ∧ cs' = cs .pc:= cs.pc(p ; C16) ;
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	popBottom53 :
	⊦ COP(p, popBottom53)(cs, cs') ↔ cs .pc(p) = C18v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C19v0v0) ∧ cs .cmp5(p) = 1;
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	popBottom54 :
	⊦ COP(p, popBottom54)(cs, cs') ↔ cs .pc(p) = C18v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C24v0v0) .v8:= cs.v8(p ; cs .v4(p)) ∧ cs .cmp5(p) = 0;
	used for : s, ls;

;;	FlushTransition
	popBottom55 :
	⊦ COP(p, popBottom55)(cs, cs') ↔ cs .pc(p) = C18v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C18v0) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%cmp5 = icmp eq i32 %dec, %shr _ positive case
	popBottom56_t :
	⊦ COP(p, popBottom56_t)(cs, cs') ↔ cs .pc(p) = C17v0 ∧ (cs .dec(p) = cs .shr(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C18v0) .cmp5:= cs.cmp5(p ; 1) ;
	used for : s, ls;

;;	%cmp5 = icmp eq i32 %dec, %shr _ negative case
	popBottom56_f :
	⊦ COP(p, popBottom56_f)(cs, cs') ↔ cs .pc(p) = C17v0 ∧ ¬(cs .dec(p) = cs .shr(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C18v0) .cmp5:= cs.cmp5(p ; 0)) ;
	used for : s, ls;

;;	FlushTransition
	popBottom57 :
	⊦ COP(p, popBottom57)(cs, cs') ↔ cs .pc(p) = C17v0 ∧ cs' = cs .pc:= cs.pc(p ; C17) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	%add = add i32 %and, 1
	popBottom58 :
	⊦ COP(p, popBottom58)(cs, cs') ↔ cs .pc(p) = C16 ∧ cs' = cs .pc:= cs.pc(p ; C17) .add:= cs.add(p ; cs .and(p) + 1);
	used for : s, ls;

;;	FlushTransition
	popBottom59 :
	⊦ COP(p, popBottom59)(cs, cs') ↔ cs .pc(p) = C19v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C19v0) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%8 = phi i32* [%.pre , %if.then7][%4 , %if.end3]
	popBottom60 :
	⊦ COP(p, popBottom60)(cs, cs') ↔ cs .pc(p) = C24v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C25v0v0);
	used for : s, ls;

;;	FlushTransition
	popBottom61 :
	⊦ COP(p, popBottom61)(cs, cs') ↔ cs .pc(p) = C24v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C24v0) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	popBottom62 :
	⊦ COP(p, popBottom62)(cs, cs') ↔ cs .pc(p) = C18v0 ∧ cs' = cs .pc:= cs.pc(p ; C19v0) ∧ cs .cmp5(p) = 1;
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	popBottom63 :
	⊦ COP(p, popBottom63)(cs, cs') ↔ cs .pc(p) = C18v0 ∧ cs' = cs .pc:= cs.pc(p ; C24v0) .v8:= cs.v8(p ; cs .v4(p)) ∧ cs .cmp5(p) = 0;
	used for : s, ls;

;;	FlushTransition
	popBottom64 :
	⊦ COP(p, popBottom64)(cs, cs') ↔ cs .pc(p) = C18v0 ∧ cs' = cs .pc:= cs.pc(p ; C18) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	%cmp5 = icmp eq i32 %dec, %shr _ positive case
	popBottom65_t :
	⊦ COP(p, popBottom65_t)(cs, cs') ↔ cs .pc(p) = C17 ∧ (cs .dec(p) = cs .shr(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C18) .cmp5:= cs.cmp5(p ; 1) ;
	used for : s, ls;

;;	%cmp5 = icmp eq i32 %dec, %shr _ negative case
	popBottom65_f :
	⊦ COP(p, popBottom65_f)(cs, cs') ↔ cs .pc(p) = C17 ∧ ¬(cs .dec(p) = cs .shr(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C18) .cmp5:= cs.cmp5(p ; 0)) ;
	used for : s, ls;

;;	FlushTransition
	popBottom66 :
	⊦ COP(p, popBottom66)(cs, cs') ↔ cs .pc(p) = C19v0 ∧ cs' = cs .pc:= cs.pc(p ; C19) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	store i32 %add, i32* %8, align 4, !tbaa !3
	popBottom67 :
	⊦ COP(p, popBottom67)(cs, cs') ↔ cs .pc(p) = C25v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C26v0v0v8);
	used for : s, ls;

;;	FlushTransition
	popBottom68 :
	⊦ COP(p, popBottom68)(cs, cs') ↔ cs .pc(p) = C25v0v0 ∧ cs' = cs .pc:= cs.pc(p ; C25v0) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%8 = phi i32* [%.pre , %if.then7][%4 , %if.end3]
	popBottom69 :
	⊦ COP(p, popBottom69)(cs, cs') ↔ cs .pc(p) = C24v0 ∧ cs' = cs .pc:= cs.pc(p ; C25v0);
	used for : s, ls;

;;	FlushTransition
	popBottom70 :
	⊦ COP(p, popBottom70)(cs, cs') ↔ cs .pc(p) = C24v0 ∧ cs' = cs .pc:= cs.pc(p ; C24) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	popBottom71 :
	⊦ COP(p, popBottom71)(cs, cs') ↔ cs .pc(p) = C18 ∧ cs' = cs .pc:= cs.pc(p ; C19) ∧ cs .cmp5(p) = 1;
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	popBottom72 :
	⊦ COP(p, popBottom72)(cs, cs') ↔ cs .pc(p) = C18 ∧ cs' = cs .pc:= cs.pc(p ; C24) .v8:= cs.v8(p ; cs .v4(p)) ∧ cs .cmp5(p) = 0;
	used for : s, ls;

;;	%6 = cmpxchg i32* %4, i32 %5, i32 %add seq_cst _ positive case
	popBottom73_t :
	⊦ COP(p, popBottom73_t)(cs, cs') ↔ cs .pc(p) = C19 ∧  cs.mem[cs .v4(p) .v] = ⌜cs .v5(p)⌝ ∧ cs' = cs .pc:= cs.pc(p; C20) .v6:= cs.v6(p ; 1) .mem:= cs.mem[cs .v4(p) .v,⌜cs .add(p)⌝] ;
	used for : s, ls;

;;	%6 = cmpxchg i32* %4, i32 %5, i32 %add seq_cst _ negative case
	popBottom73_f :
	⊦ COP(p, popBottom73_f)(cs, cs') ↔ cs .pc(p) = C19 ∧  cs.mem[cs .v4(p) .v] ≠ ⌜cs .v5(p)⌝ ∧ cs' = cs .pc:= cs.pc(p; C20) .v6:= cs.v6(p ; 0);
	used for : s, ls;

;;	br label %return
	popBottom74 :
	⊦ COP(p, popBottom74)(cs, cs') ↔ cs .pc(p) = C26v0v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C27v0v0v8) .retval_0:= cs.retval_0(p ; (0 - 1));
	used for : s, ls;

;;	FlushTransition
	popBottom75 :
	⊦ COP(p, popBottom75)(cs, cs') ↔ cs .pc(p) = C26v0v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C26v0v8) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	store i32 %add, i32* %8, align 4, !tbaa !3
	popBottom76 :
	⊦ COP(p, popBottom76)(cs, cs') ↔ cs .pc(p) = C25v0 ∧ cs' = cs .pc:= cs.pc(p ; C26v0v8);
	used for : s, ls;

;;	FlushTransition
	popBottom77 :
	⊦ COP(p, popBottom77)(cs, cs') ↔ cs .pc(p) = C25v0 ∧ cs' = cs .pc:= cs.pc(p ; C25) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	%8 = phi i32* [%.pre , %if.then7][%4 , %if.end3]
	popBottom78 :
	⊦ COP(p, popBottom78)(cs, cs') ↔ cs .pc(p) = C24 ∧ cs' = cs .pc:= cs.pc(p ; C25);
	used for : s, ls;

;;	%7 = icmp eq i32 %6, %5 _ positive case
	popBottom79_t :
	⊦ COP(p, popBottom79_t)(cs, cs') ↔ cs .pc(p) = C20 ∧ (cs .v6(p) = cs .v5(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C21) .v7:= cs.v7(p ; 1) ;
	used for : s, ls;

;;	%7 = icmp eq i32 %6, %5 _ negative case
	popBottom79_f :
	⊦ COP(p, popBottom79_f)(cs, cs') ↔ cs .pc(p) = C20 ∧ ¬(cs .v6(p) = cs .v5(p)
	) ∧ cs' = cs .pc:= cs.pc(p; C21) .v7:= cs.v7(p ; 0)) ;
	used for : s, ls;

;;	%retval.0 = phi i32 [, %if.end9][, %entry][%3 , %if.end][%3 , %if.then6]
	popBottom80 :
	⊦ COP(p, popBottom80)(cs, cs') ↔ cs .pc(p) = C27v0v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C28v0v0v8);
	used for : s, ls;

;;	FlushTransition
	popBottom81 :
	⊦ COP(p, popBottom81)(cs, cs') ↔ cs .pc(p) = C27v0v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C27v0v8) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	br label %return
	popBottom82 :
	⊦ COP(p, popBottom82)(cs, cs') ↔ cs .pc(p) = C26v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C27v0v8) .retval_0:= cs.retval_0(p ; (0 - 1));
	used for : s, ls;

;;	FlushTransition
	popBottom83 :
	⊦ COP(p, popBottom83)(cs, cs') ↔ cs .pc(p) = C26v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C26v8) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	store i32 %add, i32* %8, align 4, !tbaa !3
	popBottom84 :
	⊦ COP(p, popBottom84)(cs, cs') ↔ cs .pc(p) = C25 ∧ cs' = cs .pc:= cs.pc(p ; C26v8);
	used for : s, ls;

;;	br %7, label %return, label %if.then7
	popBottom85 :
	⊦ COP(p, popBottom85)(cs, cs') ↔ cs .pc(p) = C21 ∧ cs' = cs .pc:= cs.pc(p ; C27) .retval_0:= cs.retval_0(p ; cs .v3(p)) ∧ cs .v7(p) = 1;
	used for : s, ls;

;;	br %7, label %return, label %if.then7
	popBottom86 :
	⊦ COP(p, popBottom86)(cs, cs') ↔ cs .pc(p) = C21 ∧ cs' = cs .pc:= cs.pc(p ; C22) ∧ cs .v7(p) = 0;
	used for : s, ls;

;;	FlushTransition
	popBottom87 :
	⊦ COP(p, popBottom87)(cs, cs') ↔ cs .pc(p) = C28v0v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C28v0v8) .mem:= cs.mem[ cs .v0(p) .v ,⌜cs .dec(p)⌝];
	used for : s, ls;

;;	%retval.0 = phi i32 [, %if.end9][, %entry][%3 , %if.end][%3 , %if.then6]
	popBottom88 :
	⊦ COP(p, popBottom88)(cs, cs') ↔ cs .pc(p) = C27v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C28v0v8);
	used for : s, ls;

;;	FlushTransition
	popBottom89 :
	⊦ COP(p, popBottom89)(cs, cs') ↔ cs .pc(p) = C27v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C27v8) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	br label %return
	popBottom90 :
	⊦ COP(p, popBottom90)(cs, cs') ↔ cs .pc(p) = C26v8 ∧ cs' = cs .pc:= cs.pc(p ; C27v8) .retval_0:= cs.retval_0(p ; (0 - 1));
	used for : s, ls;

;;	FlushTransition
	popBottom91 :
	⊦ COP(p, popBottom91)(cs, cs') ↔ cs .pc(p) = C26v8 ∧ cs' = cs .pc:= cs.pc(p ; C26) .mem:= cs.mem[ cs .v8(p) .v ,⌜cs .add(p)⌝];
	used for : s, ls;

;;	%.pre = load i32** @age, align 4, !tbaa !0
	popBottom92 :
	⊦ COP(p, popBottom92)(cs, cs') ↔ cs .pc(p) = C22 ∧ cs' = cs .pc:= cs.pc(p ; C23) .v_pre:= cs.v_pre(p ; cs.mem[cs .age .v] .v);
	used for : s, ls;

;;	FlushTransition
	popBottom93 :
	⊦ COP(p, popBottom93)(cs, cs') ↔ cs .pc(p) = C28v0v8 ∧ cs' = cs .pc:= cs.pc(p ; C28v8) .mem:= cs.mem[ cs .v0(p) .v ,⌜0⌝];
	used for : s, ls;

;;	%retval.0 = phi i32 [, %if.end9][, %entry][%3 , %if.end][%3 , %if.then6]
	popBottom94 :
	⊦ COP(p, popBottom94)(cs, cs') ↔ cs .pc(p) = C27v8 ∧ cs' = cs .pc:= cs.pc(p ; C28v8);
	used for : s, ls;

;;	FlushTransition
	popBottom95 :
	⊦ COP(p, popBottom95)(cs, cs') ↔ cs .pc(p) = C27v8 ∧ cs' = cs .pc:= cs.pc(p ; C27) .mem:= cs.mem[ cs .v8(p) .v ,⌜cs .add(p)⌝];
	used for : s, ls;

;;	br label %return
	popBottom96 :
	⊦ COP(p, popBottom96)(cs, cs') ↔ cs .pc(p) = C26 ∧ cs' = cs .pc:= cs.pc(p ; C27) .retval_0:= cs.retval_0(p ; (0 - 1));
	used for : s, ls;

;;	br label %if.end9
	popBottom97 :
	⊦ COP(p, popBottom97)(cs, cs') ↔ cs .pc(p) = C23 ∧ cs' = cs .pc:= cs.pc(p ; C24) .v8:= cs.v8(p ; ⌜cs .v_pre(p)⌝);
	used for : s, ls;

;;	FlushTransition
	popBottom98 :
	⊦ COP(p, popBottom98)(cs, cs') ↔ cs .pc(p) = C28v8 ∧ cs' = cs .pc:= cs.pc(p ; C28) .mem:= cs.mem[ cs .v8(p) .v ,⌜cs .add(p)⌝];
	used for : s, ls;


;;	ret void
	pushBottom14ret :
	⊦ RETOP(p, pushBottom14ret)(cs, cs', return) ↔ cs .pc(p) = A07 ∧ cs' = cs .pc:= cs.pc(p ; N);
	used for : s, ls;

;;	ret i32 %retval.0
	popTop12ret :
	⊦ RETOP(p, popTop12ret)(cs, cs', return) ↔ cs .pc(p) = B16 ∧ cs' = cs .pc:= cs.pc(p ; N) ∧ return = cs .retval_0(p);
	used for : s, ls;

;;	ret i32 %retval.0
	popBottom8ret :
	⊦ RETOP(p, popBottom8ret)(cs, cs', return) ↔ cs .pc(p) = C28 ∧ cs' = cs .pc:= cs.pc(p ; N) ∧ return = cs .retval_0(p);
	used for : s, ls;


end enrich
