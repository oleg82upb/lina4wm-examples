enrich 	natref-memory,
		localstate,
		cindex,
		input with 

	constants
		bot : ref;
		deq : ref;
		age : ref;
		top : ref;
	
	functions
		INVOP : IJ → input ×  memory ×  Localstate ×  memory ×  Localstate → bool;
		COP : CJ → memory × Localstate × memory × Localstate → bool;
		RETOP : RJ → memory × Localstate × memory × Localstate × nat → bool;
	predicates
		LSInit : Localstate × PID;
		GSInit : memory;
	variables
		invop : input × memory × Localstate × memory × Localstate → bool;
		cop : memory × Localstate × memory × Localstate → bool;
		retop : memory × Localstate × memory × Localstate × nat → bool;
		mem' : memory;
		return : nat;
	axioms

	LSInit : ⊦ LSInit(ls, p) ↔ ls .pc = N ∧ ls .pid = p;
	used for : s, ls;

;; 	push reflects function @push
	pushini :
	⊦ INVOP(pushini)(inp, mem, ls, mem', ls') ↔ ls .pc = N ∧ nat?(inp) ∧ ls' = ls .pc:= A0 .elem:= inp .nat1 ∧ mem' = mem; 
	used for : s, ls;

;; 	dequeue reflects function @dequeue
	dequeueini :
	⊦ INVOP(dequeueini)(inp, mem, ls, mem', ls') ↔ ls .pc = N ∧ ls' = ls .pc:= B00 ∧ mem' = mem; 
	used for : s, ls;

;; 	pop reflects function @pop
	popini :
	⊦ INVOP(popini)(inp, mem, ls, mem', ls') ↔ ls .pc = N ∧ ls' = ls .pc:= C00 ∧ mem' = mem; 
	used for : s, ls;

;; 	main reflects function @main
	mainini :
	⊦ INVOP(mainini)(inp, mem, ls, mem', ls') ↔ ls .pc = N ∧ natref?(inp) ∧ ls' = ls .pc:= D0 .argv:= inp .ref1 .argc:= inp .nat1 ∧ mem' = mem; 
	used for : s, ls;

;;	%0 = load i32**@bot, align 4, !tbaa !0
	push1 :
	⊦ COP(push1)(mem, ls, mem', ls') ↔ ls .pc = A0 ∧ ls' = ls .pc:= A1 .v0:= mem[bot .v] ∧ mem' = mem;
	used for : s, ls;

;;	%1 = load i32*%0, align 4, !tbaa !3
	push2 :
	⊦ COP(push2)(mem, ls, mem', ls') ↔ ls .pc = A1 ∧ ls' = ls .pc:= A2 .v1:= mem[ls .v0 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%2 = load i32**@deq, align 4, !tbaa !0
	push3 :
	⊦ COP(push3)(mem, ls, mem', ls') ↔ ls .pc = A2 ∧ ls' = ls .pc:= A3 .v2:= mem[deq .v] ∧ mem' = mem;
	used for : s, ls;

;;	%arrayidx = getelementptr i32*%2, i32%1
	push4 :
	⊦ COP(push4)(mem, ls, mem', ls') ↔ ls .pc = A3 ∧ ls' = ls .pc:= A4 .arrayidx:=  ∧ mem' = mem;
	used for : s, ls;

;;	store i32%elem, i32*%arrayidx, align 4, !tbaa !3
	push5 :
	⊦ COP(push5)(mem, ls, mem', ls') ↔ ls .pc = A4 ∧ ls' = ls .pc:= A5 ∧ mem' = mem;
	used for : s, ls;

;;	%inc = add i32 %1, 1
	push6 :
	⊦ COP(push6)(mem, ls, mem', ls') ↔ ls .pc = A5 ∧ ls' = ls .pc:= A6 .inc:= ( ls .v1 + 1) ∧ mem' = mem;
	used for : s, ls;

;;	store i32%inc, i32*%0, align 4, !tbaa !3
	push7 :
	⊦ COP(push7)(mem, ls, mem', ls') ↔ ls .pc = A6 ∧ ls' = ls .pc:= A7 ∧ mem' = mem;
	used for : s, ls;

;;	%0 = load i32**@age, align 4, !tbaa !0
	dequeue1 :
	⊦ COP(dequeue1)(mem, ls, mem', ls') ↔ ls .pc = B00 ∧ ls' = ls .pc:= B01 .v0:= mem[age .v] ∧ mem' = mem;
	used for : s, ls;

;;	%1 = load i32*%0, align 4, !tbaa !3
	dequeue2 :
	⊦ COP(dequeue2)(mem, ls, mem', ls') ↔ ls .pc = B01 ∧ ls' = ls .pc:= B02 .v1:= mem[ls .v0 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%2 = load i32**@bot, align 4, !tbaa !0
	dequeue3 :
	⊦ COP(dequeue3)(mem, ls, mem', ls') ↔ ls .pc = B02 ∧ ls' = ls .pc:= B03 .v2:= mem[bot .v] ∧ mem' = mem;
	used for : s, ls;

;;	%3 = load i32*%2, align 4, !tbaa !3
	dequeue4 :
	⊦ COP(dequeue4)(mem, ls, mem', ls') ↔ ls .pc = B03 ∧ ls' = ls .pc:= B04 .v3:= mem[ls .v2 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%shr = ashr i32 %1, 16
	NEEDS ATTENTION !
	dequeue5 :
	⊦ COP(dequeue5)(mem, ls, mem', ls') ↔ ls .pc = B04 ∧ ls' = ls .pc:= B05 ∧ mem' = mem;
	used for : s, ls;

;;	%cmp = icmp ugt i32 %3, %shr
	dequeue6 :
	⊦ COP(dequeue6)(mem, ls, mem', ls') ↔ ls .pc = B05 ∧ (ls .v3 ≤ ls .shr ⊃ ls' = ls .pc:= B06 .cmp:= 0 ; ls' = ls .pc:= B06 .cmp:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp, label %if.end, label %return
	dequeue7 :
	⊦ COP(dequeue7)(mem, ls, mem', ls') ↔ ls .pc = B06 ∧ ls' = ls .pc:= B07 ∧ ls .cmp = 1;
	used for : s, ls;

;;	br %cmp, label %if.end, label %return
	dequeue8 :
	⊦ COP(dequeue8)(mem, ls, mem', ls') ↔ ls .pc = B06 ∧ ls' = ls .pc:= B15 .retval_0:= (0 - 1) ∧ ls .cmp = 0;
	used for : s, ls;

;;	%4 = load i32**@deq, align 4, !tbaa !0
	dequeue9 :
	⊦ COP(dequeue9)(mem, ls, mem', ls') ↔ ls .pc = B07 ∧ ls' = ls .pc:= B08 .v4:= mem[deq .v] ∧ mem' = mem;
	used for : s, ls;

;;	%retval.0 = phi i32 [, %entry][%. , %if.end]
	dequeue10 :
	⊦ COP(dequeue10)(mem, ls, mem', ls') ↔ ls .pc = B15 ∧ ls' = ls .pc:= B16 ∧ mem' = mem;
	used for : s, ls;

;;	%arrayidx = getelementptr i32*%4, i32%shr
	dequeue11 :
	⊦ COP(dequeue11)(mem, ls, mem', ls') ↔ ls .pc = B08 ∧ ls' = ls .pc:= B09 .arrayidx:=  ∧ mem' = mem;
	used for : s, ls;

;;	%5 = load i32*%arrayidx, align 4, !tbaa !3
	dequeue13 :
	⊦ COP(dequeue13)(mem, ls, mem', ls') ↔ ls .pc = B09 ∧ ls' = ls .pc:= B10 .v5:= mem[ls .arrayidx .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%add5 = add i32 %1, 65536
	dequeue14 :
	⊦ COP(dequeue14)(mem, ls, mem', ls') ↔ ls .pc = B10 ∧ ls' = ls .pc:= B11 .add5:= ( ls .v1 + 65536) ∧ mem' = mem;
	used for : s, ls;

;;	%6 = cmpxchg i32*%0, i32%1, i32%add5 seq_cst
	dequeue15 :
	⊦ COP(dequeue15)(mem, ls, mem', ls') ↔ ls .pc = B11 ∧ ( mem[ls .v0 .v] = ⌜ ls .v1⌝ ⊃ (ls' = ls .pc:= B12 .v6:= 1 ∧ mem' = mem[ls .v0 .v, ⌜ ls .add5⌝]) ; (ls' = ls .pc:= B12 .v6:= 0 ∧ mem' = mem));
	used for : s, ls;

;;	%7 = icmp eq i32 %6, %1
	dequeue16 :
	⊦ COP(dequeue16)(mem, ls, mem', ls') ↔ ls .pc = B12 ∧ (ls .v6 = ls .v1
	 ⊃ ls' = ls .pc:= B13 .v7:= 1 ; ls' = ls .pc:= B13 .v7:= 0) ∧ mem' = mem;
	used for : s, ls;

;;	%. = select i1%7, i32%5, i32-2
	dequeue17 :
	⊦ COP(dequeue17)(mem, ls, mem', ls') ↔ ls .pc = B13 ∧ (ls .v7 = 1 ⊃ ls' = ls .pc:= B14 ._:= ls .v5 ; ls' = ls .pc:= B14 ._:= (0 - 2))
	 ∧ mem' = mem;
	used for : s, ls;

;;	br label %return
	dequeue18 :
	⊦ COP(dequeue18)(mem, ls, mem', ls') ↔ ls .pc = B14 ∧ ls' = ls .pc:= B15 .retval_0:= ls ._;
	used for : s, ls;

;;	%0 = load i32**@bot, align 4, !tbaa !0
	pop1 :
	⊦ COP(pop1)(mem, ls, mem', ls') ↔ ls .pc = C00 ∧ ls' = ls .pc:= C01 .v0:= mem[bot .v] ∧ mem' = mem;
	used for : s, ls;

;;	%1 = load i32*%0, align 4, !tbaa !3
	pop2 :
	⊦ COP(pop2)(mem, ls, mem', ls') ↔ ls .pc = C01 ∧ ls' = ls .pc:= C02 .v1:= mem[ls .v0 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%cmp = icmp eq i32 %1, 0
	pop3 :
	⊦ COP(pop3)(mem, ls, mem', ls') ↔ ls .pc = C02 ∧ (ls .v1 = 0
	 ⊃ ls' = ls .pc:= C03 .cmp:= 1 ; ls' = ls .pc:= C03 .cmp:= 0) ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp, label %return, label %if.end
	pop4 :
	⊦ COP(pop4)(mem, ls, mem', ls') ↔ ls .pc = C03 ∧ ls' = ls .pc:= C27 .retval_0:= (0 - 1) ∧ ls .cmp = 1;
	used for : s, ls;

;;	br %cmp, label %return, label %if.end
	pop5 :
	⊦ COP(pop5)(mem, ls, mem', ls') ↔ ls .pc = C03 ∧ ls' = ls .pc:= C04 ∧ ls .cmp = 0;
	used for : s, ls;

;;	%retval.0 = phi i32 [, %if.end9][, %entry][%3 , %if.end][%3 , %if.then6]
	pop6 :
	⊦ COP(pop6)(mem, ls, mem', ls') ↔ ls .pc = C27 ∧ ls' = ls .pc:= C28 ∧ mem' = mem;
	used for : s, ls;

;;	%dec = add i32 %1, -1
	pop7 :
	⊦ COP(pop7)(mem, ls, mem', ls') ↔ ls .pc = C04 ∧ ls' = ls .pc:= C05 .dec:= ( ls .v1 + (0 - 1)) ∧ mem' = mem;
	used for : s, ls;

;;	store i32%dec, i32*%0, align 4, !tbaa !3
	pop9 :
	⊦ COP(pop9)(mem, ls, mem', ls') ↔ ls .pc = C05 ∧ ls' = ls .pc:= C06 ∧ mem' = mem;
	used for : s, ls;

;;	%2 = load i32**@deq, align 4, !tbaa !0
	pop10 :
	⊦ COP(pop10)(mem, ls, mem', ls') ↔ ls .pc = C06 ∧ ls' = ls .pc:= C07 .v2:= mem[deq .v] ∧ mem' = mem;
	used for : s, ls;

;;	%arrayidx = getelementptr i32*%2, i32%dec
	pop11 :
	⊦ COP(pop11)(mem, ls, mem', ls') ↔ ls .pc = C07 ∧ ls' = ls .pc:= C08 .arrayidx:=  ∧ mem' = mem;
	used for : s, ls;

;;	%3 = load i32*%arrayidx, align 4, !tbaa !3
	pop12 :
	⊦ COP(pop12)(mem, ls, mem', ls') ↔ ls .pc = C08 ∧ ls' = ls .pc:= C09 .v3:= mem[ls .arrayidx .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%4 = load i32**@age, align 4, !tbaa !0
	pop13 :
	⊦ COP(pop13)(mem, ls, mem', ls') ↔ ls .pc = C09 ∧ ls' = ls .pc:= C10 .v4:= mem[age .v] ∧ mem' = mem;
	used for : s, ls;

;;	%5 = load i32*%4, align 4, !tbaa !3
	pop14 :
	⊦ COP(pop14)(mem, ls, mem', ls') ↔ ls .pc = C10 ∧ ls' = ls .pc:= C11 .v5:= mem[ls .v4 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%shr = ashr i32 %5, 16
	NEEDS ATTENTION !
	pop15 :
	⊦ COP(pop15)(mem, ls, mem', ls') ↔ ls .pc = C11 ∧ ls' = ls .pc:= C12 ∧ mem' = mem;
	used for : s, ls;

;;	%cmp1 = icmp ugt i32 %dec, %shr
	pop16 :
	⊦ COP(pop16)(mem, ls, mem', ls') ↔ ls .pc = C12 ∧ (ls .dec ≤ ls .shr ⊃ ls' = ls .pc:= C13 .cmp1:= 0 ; ls' = ls .pc:= C13 .cmp1:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp1, label %return, label %if.end3
	pop17 :
	⊦ COP(pop17)(mem, ls, mem', ls') ↔ ls .pc = C13 ∧ ls' = ls .pc:= C27 .retval_0:= ls .v3 ∧ ls .cmp1 = 1;
	used for : s, ls;

;;	br %cmp1, label %return, label %if.end3
	pop18 :
	⊦ COP(pop18)(mem, ls, mem', ls') ↔ ls .pc = C13 ∧ ls' = ls .pc:= C14 ∧ ls .cmp1 = 0;
	used for : s, ls;

;;	store i320, i32*%0, align 4, !tbaa !3
	pop19 :
	⊦ COP(pop19)(mem, ls, mem', ls') ↔ ls .pc = C14 ∧ ls' = ls .pc:= C15 ∧ mem' = mem;
	used for : s, ls;

;;	%and = and i32 %5, 65535
	NEEDS ATTENTION !
	pop20 :
	⊦ COP(pop20)(mem, ls, mem', ls') ↔ ls .pc = C15 ∧ ls' = ls .pc:= C16 ∧ mem' = mem;
	used for : s, ls;

;;	%add = add i32 %and, 1
	pop21 :
	⊦ COP(pop21)(mem, ls, mem', ls') ↔ ls .pc = C16 ∧ ls' = ls .pc:= C17 .add:= ( ls .and + 1) ∧ mem' = mem;
	used for : s, ls;

;;	%cmp5 = icmp eq i32 %dec, %shr
	pop22 :
	⊦ COP(pop22)(mem, ls, mem', ls') ↔ ls .pc = C17 ∧ (ls .dec = ls .shr
	 ⊃ ls' = ls .pc:= C18 .cmp5:= 1 ; ls' = ls .pc:= C18 .cmp5:= 0) ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	pop23 :
	⊦ COP(pop23)(mem, ls, mem', ls') ↔ ls .pc = C18 ∧ ls' = ls .pc:= C19 ∧ ls .cmp5 = 1;
	used for : s, ls;

;;	br %cmp5, label %if.then6, label %if.end9
	pop24 :
	⊦ COP(pop24)(mem, ls, mem', ls') ↔ ls .pc = C18 ∧ ls' = ls .pc:= C24 .v8:= ls .v4 ∧ ls .cmp5 = 0;
	used for : s, ls;

;;	%6 = cmpxchg i32*%4, i32%5, i32%add seq_cst
	pop25 :
	⊦ COP(pop25)(mem, ls, mem', ls') ↔ ls .pc = C19 ∧ ( mem[ls .v4 .v] = ⌜ ls .v5⌝ ⊃ (ls' = ls .pc:= C20 .v6:= 1 ∧ mem' = mem[ls .v4 .v, ⌜ ls .add⌝]) ; (ls' = ls .pc:= C20 .v6:= 0 ∧ mem' = mem));
	used for : s, ls;

;;	%8 = phi i32* [%.pre , %if.then6.if.end9_crit_edge][%4 , %if.end3]
	pop26 :
	⊦ COP(pop26)(mem, ls, mem', ls') ↔ ls .pc = C24 ∧ ls' = ls .pc:= C25 ∧ mem' = mem;
	used for : s, ls;

;;	%7 = icmp eq i32 %6, %5
	pop27 :
	⊦ COP(pop27)(mem, ls, mem', ls') ↔ ls .pc = C20 ∧ (ls .v6 = ls .v5
	 ⊃ ls' = ls .pc:= C21 .v7:= 1 ; ls' = ls .pc:= C21 .v7:= 0) ∧ mem' = mem;
	used for : s, ls;

;;	store i32%add, i32*%8, align 4, !tbaa !3
	pop28 :
	⊦ COP(pop28)(mem, ls, mem', ls') ↔ ls .pc = C25 ∧ ls' = ls .pc:= C26 ∧ mem' = mem;
	used for : s, ls;

;;	br %7, label %return, label %if.then6.if.end9_crit_edge
	pop29 :
	⊦ COP(pop29)(mem, ls, mem', ls') ↔ ls .pc = C21 ∧ ls' = ls .pc:= C27 .retval_0:= ls .v3 ∧ ls .v7 = 1;
	used for : s, ls;

;;	br %7, label %return, label %if.then6.if.end9_crit_edge
	pop30 :
	⊦ COP(pop30)(mem, ls, mem', ls') ↔ ls .pc = C21 ∧ ls' = ls .pc:= C22 ∧ ls .v7 = 0;
	used for : s, ls;

;;	br label %return
	pop31 :
	⊦ COP(pop31)(mem, ls, mem', ls') ↔ ls .pc = C26 ∧ ls' = ls .pc:= C27 .retval_0:= (0 - 1);
	used for : s, ls;

;;	%.pre = load i32**@age, align 4, !tbaa !0
	pop32 :
	⊦ COP(pop32)(mem, ls, mem', ls') ↔ ls .pc = C22 ∧ ls' = ls .pc:= C23 ._pre:= mem[age .v] ∧ mem' = mem;
	used for : s, ls;

;;	br label %if.end9
	pop33 :
	⊦ COP(pop33)(mem, ls, mem', ls') ↔ ls .pc = C23 ∧ ls' = ls .pc:= C24 .v8:= ls ._pre;
	used for : s, ls;

;;	ret void
	push8ret :
	⊦ RETOP(push8ret)(mem, ls, mem', ls', return) ↔ ls .pc = A7 ∧ ls' = ls .pc:= N ∧ mem' = mem;
	used for : s, ls;
	
;;	ret i32%retval.0
	dequeue12ret :
	⊦ RETOP(dequeue12ret)(mem, ls, mem', ls', return) ↔ ls .pc = B16 ∧ ls' = ls .pc:= N ∧ return = ls .retval_0 ∧ mem' = mem;
	used for : s, ls;
	
;;	ret i32%retval.0
	pop8ret :
	⊦ RETOP(pop8ret)(mem, ls, mem', ls', return) ↔ ls .pc = C28 ∧ ls' = ls .pc:= N ∧ return = ls .retval_0 ∧ mem' = mem;
	used for : s, ls;
	
;;	ret i320
	main1ret :
	⊦ RETOP(main1ret)(mem, ls, mem', ls', return) ↔ ls .pc = D0 ∧ ls' = ls .pc:= N ∧ return = 0 ∧ mem' = mem;
	used for : s, ls;
	
end enrich
		
