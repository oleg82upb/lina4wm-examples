enrich 	CS,
		cindex with 

	functions
		INVOP : Proc × IJ → int × CS × CS → bool;
		COP : Proc × CJ → CS × CS → bool;
		RETOP : Proc × RJ → CS × CS × int → bool;
	predicates
		CSInit : CS;

	variables
		invop : int × CS × CS → bool;
		cop : CS × CS → bool;
		retop : CS × CS × int → bool;
		flag0, flag0' : ref;
		flag1, flag1' : ref;
		turn, turn' : ref;
		inp : int;
		return : int;
	axioms
	CSInit : 
	⊦ CSInit(mkcs(flag0, flag1, turn, pcf, mem, reff1, reff2, intf3, intf4, reff5, reff6, intf7, intf8, reff9, intf10, intf11, reff12, reff13, intf14, intf15, intf16, intf17, reff18)) ↔ ( flag0 = ⌜0⌝ ∧ flag1 = ⌜0⌝ ∧ turn = ⌜0⌝ ∧ pcf = (λ p. N)  ∧ reff1 = (λ p. ⌜0⌝) ∧ reff2 = (λ p. ⌜0⌝) ∧ intf3 = (λ p. 0) ∧ intf4 = (λ p. 0) ∧ reff5 = (λ p. ⌜0⌝) ∧ reff6 = (λ p. ⌜0⌝) ∧ intf7 = (λ p. 0) ∧ intf8 = (λ p. 0) ∧ reff9 = (λ p. ⌜0⌝) ∧ intf10 = (λ p. 0) ∧ intf11 = (λ p. 0) ∧ reff12 = (λ p. ⌜0⌝) ∧ reff13 = (λ p. ⌜0⌝) ∧ intf14 = (λ p. 0) ∧ intf15 = (λ p. 0) ∧ intf16 = (λ p. 0) ∧ intf17 = (λ p. 0) ∧ reff18 = (λ p. ⌜0⌝));
	used for : s, ls;

;; 	p0 reflects function @p0
	p0ini :
	⊦ INVOP(p, p0ini)(inp, cs, cs') ↔ cs .pc(p) = N ∧ cs' = cs .pc:= cs.pc(p ; A00) ; 
	used for : s, ls;

;; 	p1 reflects function @p1
	p1ini :
	⊦ INVOP(p, p1ini)(inp, cs, cs') ↔ cs .pc(p) = N ∧ cs' = cs .pc:= cs.pc(p ; B00) ; 
	used for : s, ls;

;; 	main reflects function @main
	mainini :
	⊦ INVOP(p, mainini)(inp, cs, cs') ↔ cs .pc(p) = N ∧ cs' = cs .pc:= cs.pc(p ; C0) ; 
	used for : s, ls;

;;	%0 = load i8** @flag0, align 4
	p01 :
	⊦ COP(p, p01)(cs, cs') ↔ cs .pc(p) = A00 ∧ cs' = cs .pc:= cs.pc(p ; A01) .v0:= cs.v0(p ; cs.mem[cs .flag0 .v]);
	used for : s, ls;

;;	store i8 1, i8* %0, align 1
	p02 :
	⊦ COP(p, p02)(cs, cs') ↔ cs .pc(p) = A01 ∧ cs' = cs .pc:= cs.pc(p ; A02);
	used for : s, ls;

;;	br label %while.cond
	p03 :
	⊦ COP(p, p03)(cs, cs') ↔ cs .pc(p) = A02 ∧ cs' = cs .pc:= cs.pc(p ; A03);
	used for : s, ls;

;;	fence seq_cst
	p04 :
	⊦ COP(p, p04)(cs, cs') ↔ cs .pc(p) = A03 ∧ cs' = cs .pc:= cs.pc(p ; A04);
	used for : s, ls;

;;	%1 = load i8** @flag1, align 4
	p05 :
	⊦ COP(p, p05)(cs, cs') ↔ cs .pc(p) = A04 ∧ cs' = cs .pc:= cs.pc(p ; A05) .v1:= cs.v1(p ; cs.mem[cs .flag1 .v]);
	used for : s, ls;

;;	%2 = load i8* %1, align 1
	p06 :
	⊦ COP(p, p06)(cs, cs') ↔ cs .pc(p) = A05 ∧ cs' = cs .pc:= cs.pc(p ; A06) .v2:= cs.v2(p ; cs.mem[cs .v1(p) .v] .v);
	used for : s, ls;

;;	%tobool = trunc i8 %2 to i1
	p07 :
	⊦ COP(p, p07)(cs, cs') ↔ cs .pc(p) = A06 ∧ cs' = cs .pc:= cs.pc(p ; A07) .tobool:= cs.tobool(p ; cs .v2(p));
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p08 :
	⊦ COP(p, p08)(cs, cs') ↔ cs .pc(p) = A07 ∧ cs' = cs .pc:= cs.pc(p ; A08) ∧ cs .tobool(p) = 1;
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p09 :
	⊦ COP(p, p09)(cs, cs') ↔ cs .pc(p) = A07 ∧ cs' = cs .pc:= cs.pc(p ; A28) ∧ cs .tobool(p) = 0;
	used for : s, ls;

;;	%3 = load i8** @turn, align 4
	p010 :
	⊦ COP(p, p010)(cs, cs') ↔ cs .pc(p) = A08 ∧ cs' = cs .pc:= cs.pc(p ; A09) .v3:= cs.v3(p ; cs.mem[cs .turn .v]);
	used for : s, ls;

;;	%9 = load i8** @turn, align 4
	p011 :
	⊦ COP(p, p011)(cs, cs') ↔ cs .pc(p) = A28 ∧ cs' = cs .pc:= cs.pc(p ; A29) .v9:= cs.v9(p ; cs.mem[cs .turn .v]);
	used for : s, ls;

;;	%4 = load i8* %3, align 1
	p012 :
	⊦ COP(p, p012)(cs, cs') ↔ cs .pc(p) = A09 ∧ cs' = cs .pc:= cs.pc(p ; A10) .v4:= cs.v4(p ; cs.mem[cs .v3(p) .v] .v);
	used for : s, ls;

;;	store i8 1, i8* %9, align 1
	p013 :
	⊦ COP(p, p013)(cs, cs') ↔ cs .pc(p) = A29 ∧ cs' = cs .pc:= cs.pc(p ; A30);
	used for : s, ls;

;;	%tobool1 = trunc i8 %4 to i1
	p014 :
	⊦ COP(p, p014)(cs, cs') ↔ cs .pc(p) = A10 ∧ cs' = cs .pc:= cs.pc(p ; A11) .tobool1:= cs.tobool1(p ; cs .v4(p));
	used for : s, ls;

;;	%10 = load i8** @flag0, align 4
	p015 :
	⊦ COP(p, p015)(cs, cs') ↔ cs .pc(p) = A30 ∧ cs' = cs .pc:= cs.pc(p ; A31) .10:= cs.10(p ; cs.mem[cs .flag0 .v]);
	used for : s, ls;

;;	%conv = zext i1 %tobool1 to i32
	p016 :
	⊦ COP(p, p016)(cs, cs') ↔ cs .pc(p) = A11 ∧ cs' = cs .pc:= cs.pc(p ; A12) .conv:= cs.conv(p ; cs .tobool1(p));
	used for : s, ls;

;;	store i8 0, i8* %10, align 1
	p017 :
	⊦ COP(p, p017)(cs, cs') ↔ cs .pc(p) = A31 ∧ cs' = cs .pc:= cs.pc(p ; A32);
	used for : s, ls;

;;	%cmp = icmp ne i32 %conv, 0
	p018 :
	⊦ COP(p, p018)(cs, cs') ↔ cs .pc(p) = A12 ∧ (cs .conv(p) = 0
	 ⊃ cs' = cs .pc:= cs.pc(p; A13) .cmp:= cs.cmp(p ; 0) ; cs' = cs .pc:= cs.pc(p; A13) .cmp:= cs.cmp(p ; 1));
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p020 :
	⊦ COP(p, p020)(cs, cs') ↔ cs .pc(p) = A13 ∧ cs' = cs .pc:= cs.pc(p ; A14) ∧ cs .cmp(p) = 1;
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p021 :
	⊦ COP(p, p021)(cs, cs') ↔ cs .pc(p) = A13 ∧ cs' = cs .pc:= cs.pc(p ; A27) ∧ cs .cmp(p) = 0;
	used for : s, ls;

;;	%5 = load i8** @flag0, align 4
	p022 :
	⊦ COP(p, p022)(cs, cs') ↔ cs .pc(p) = A14 ∧ cs' = cs .pc:= cs.pc(p ; A15) .v5:= cs.v5(p ; cs.mem[cs .flag0 .v]);
	used for : s, ls;

;;	br label %while.cond
	p023 :
	⊦ COP(p, p023)(cs, cs') ↔ cs .pc(p) = A27 ∧ cs' = cs .pc:= cs.pc(p ; A03);
	used for : s, ls;

;;	store i8 0, i8* %5, align 1
	p024 :
	⊦ COP(p, p024)(cs, cs') ↔ cs .pc(p) = A15 ∧ cs' = cs .pc:= cs.pc(p ; A16);
	used for : s, ls;

;;	br label %while.cond3
	p025 :
	⊦ COP(p, p025)(cs, cs') ↔ cs .pc(p) = A16 ∧ cs' = cs .pc:= cs.pc(p ; A17);
	used for : s, ls;

;;	%6 = load i8** @turn, align 4
	p026 :
	⊦ COP(p, p026)(cs, cs') ↔ cs .pc(p) = A17 ∧ cs' = cs .pc:= cs.pc(p ; A18) .v6:= cs.v6(p ; cs.mem[cs .turn .v]);
	used for : s, ls;

;;	%7 = load i8* %6, align 1
	p027 :
	⊦ COP(p, p027)(cs, cs') ↔ cs .pc(p) = A18 ∧ cs' = cs .pc:= cs.pc(p ; A19) .v7:= cs.v7(p ; cs.mem[cs .v6(p) .v] .v);
	used for : s, ls;

;;	%tobool4 = trunc i8 %7 to i1
	p028 :
	⊦ COP(p, p028)(cs, cs') ↔ cs .pc(p) = A19 ∧ cs' = cs .pc:= cs.pc(p ; A20) .tobool4:= cs.tobool4(p ; cs .v7(p));
	used for : s, ls;

;;	%conv5 = zext i1 %tobool4 to i32
	p029 :
	⊦ COP(p, p029)(cs, cs') ↔ cs .pc(p) = A20 ∧ cs' = cs .pc:= cs.pc(p ; A21) .conv5:= cs.conv5(p ; cs .tobool4(p));
	used for : s, ls;

;;	%cmp6 = icmp ne i32 %conv5, 0
	p030 :
	⊦ COP(p, p030)(cs, cs') ↔ cs .pc(p) = A21 ∧ (cs .conv5(p) = 0
	 ⊃ cs' = cs .pc:= cs.pc(p; A22) .cmp6:= cs.cmp6(p ; 0) ; cs' = cs .pc:= cs.pc(p; A22) .cmp6:= cs.cmp6(p ; 1));
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p031 :
	⊦ COP(p, p031)(cs, cs') ↔ cs .pc(p) = A22 ∧ cs' = cs .pc:= cs.pc(p ; A23) ∧ cs .cmp6(p) = 1;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p032 :
	⊦ COP(p, p032)(cs, cs') ↔ cs .pc(p) = A22 ∧ cs' = cs .pc:= cs.pc(p ; A24) ∧ cs .cmp6(p) = 0;
	used for : s, ls;

;;	br label %while.cond3
	p033 :
	⊦ COP(p, p033)(cs, cs') ↔ cs .pc(p) = A23 ∧ cs' = cs .pc:= cs.pc(p ; A17);
	used for : s, ls;

;;	%8 = load i8** @flag0, align 4
	p034 :
	⊦ COP(p, p034)(cs, cs') ↔ cs .pc(p) = A24 ∧ cs' = cs .pc:= cs.pc(p ; A25) .v8:= cs.v8(p ; cs.mem[cs .flag0 .v]);
	used for : s, ls;

;;	store i8 1, i8* %8, align 1
	p035 :
	⊦ COP(p, p035)(cs, cs') ↔ cs .pc(p) = A25 ∧ cs' = cs .pc:= cs.pc(p ; A26);
	used for : s, ls;

;;	br label %if.end
	p036 :
	⊦ COP(p, p036)(cs, cs') ↔ cs .pc(p) = A26 ∧ cs' = cs .pc:= cs.pc(p ; A27);
	used for : s, ls;

;;	%0 = load i8** @flag1, align 4
	p11 :
	⊦ COP(p, p11)(cs, cs') ↔ cs .pc(p) = B00 ∧ cs' = cs .pc:= cs.pc(p ; B01) .v0:= cs.v0(p ; cs.mem[cs .flag1 .v]);
	used for : s, ls;

;;	store i8 1, i8* %0, align 1
	p12 :
	⊦ COP(p, p12)(cs, cs') ↔ cs .pc(p) = B01 ∧ cs' = cs .pc:= cs.pc(p ; B02);
	used for : s, ls;

;;	br label %while.cond
	p13 :
	⊦ COP(p, p13)(cs, cs') ↔ cs .pc(p) = B02 ∧ cs' = cs .pc:= cs.pc(p ; B03);
	used for : s, ls;

;;	fence seq_cst
	p14 :
	⊦ COP(p, p14)(cs, cs') ↔ cs .pc(p) = B03 ∧ cs' = cs .pc:= cs.pc(p ; B04);
	used for : s, ls;

;;	%1 = load i8** @flag0, align 4
	p15 :
	⊦ COP(p, p15)(cs, cs') ↔ cs .pc(p) = B04 ∧ cs' = cs .pc:= cs.pc(p ; B05) .v1:= cs.v1(p ; cs.mem[cs .flag0 .v]);
	used for : s, ls;

;;	%2 = load i8* %1, align 1
	p16 :
	⊦ COP(p, p16)(cs, cs') ↔ cs .pc(p) = B05 ∧ cs' = cs .pc:= cs.pc(p ; B06) .v2:= cs.v2(p ; cs.mem[cs .v1(p) .v] .v);
	used for : s, ls;

;;	%tobool = trunc i8 %2 to i1
	p17 :
	⊦ COP(p, p17)(cs, cs') ↔ cs .pc(p) = B06 ∧ cs' = cs .pc:= cs.pc(p ; B07) .tobool:= cs.tobool(p ; cs .v2(p));
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p18 :
	⊦ COP(p, p18)(cs, cs') ↔ cs .pc(p) = B07 ∧ cs' = cs .pc:= cs.pc(p ; B08) ∧ cs .tobool(p) = 1;
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p19 :
	⊦ COP(p, p19)(cs, cs') ↔ cs .pc(p) = B07 ∧ cs' = cs .pc:= cs.pc(p ; B28) ∧ cs .tobool(p) = 0;
	used for : s, ls;

;;	%3 = load i8** @turn, align 4
	p110 :
	⊦ COP(p, p110)(cs, cs') ↔ cs .pc(p) = B08 ∧ cs' = cs .pc:= cs.pc(p ; B09) .v3:= cs.v3(p ; cs.mem[cs .turn .v]);
	used for : s, ls;

;;	%9 = load i8** @turn, align 4
	p111 :
	⊦ COP(p, p111)(cs, cs') ↔ cs .pc(p) = B28 ∧ cs' = cs .pc:= cs.pc(p ; B29) .v9:= cs.v9(p ; cs.mem[cs .turn .v]);
	used for : s, ls;

;;	%4 = load i8* %3, align 1
	p112 :
	⊦ COP(p, p112)(cs, cs') ↔ cs .pc(p) = B09 ∧ cs' = cs .pc:= cs.pc(p ; B10) .v4:= cs.v4(p ; cs.mem[cs .v3(p) .v] .v);
	used for : s, ls;

;;	store i8 0, i8* %9, align 1
	p113 :
	⊦ COP(p, p113)(cs, cs') ↔ cs .pc(p) = B29 ∧ cs' = cs .pc:= cs.pc(p ; B30);
	used for : s, ls;

;;	%tobool1 = trunc i8 %4 to i1
	p114 :
	⊦ COP(p, p114)(cs, cs') ↔ cs .pc(p) = B10 ∧ cs' = cs .pc:= cs.pc(p ; B11) .tobool1:= cs.tobool1(p ; cs .v4(p));
	used for : s, ls;

;;	%10 = load i8** @flag1, align 4
	p115 :
	⊦ COP(p, p115)(cs, cs') ↔ cs .pc(p) = B30 ∧ cs' = cs .pc:= cs.pc(p ; B31) .10:= cs.10(p ; cs.mem[cs .flag1 .v]);
	used for : s, ls;

;;	%conv = zext i1 %tobool1 to i32
	p116 :
	⊦ COP(p, p116)(cs, cs') ↔ cs .pc(p) = B11 ∧ cs' = cs .pc:= cs.pc(p ; B12) .conv:= cs.conv(p ; cs .tobool1(p));
	used for : s, ls;

;;	store i8 0, i8* %10, align 1
	p117 :
	⊦ COP(p, p117)(cs, cs') ↔ cs .pc(p) = B31 ∧ cs' = cs .pc:= cs.pc(p ; B32);
	used for : s, ls;

;;	%cmp = icmp ne i32 %conv, 1
	p118 :
	⊦ COP(p, p118)(cs, cs') ↔ cs .pc(p) = B12 ∧ (cs .conv(p) = 1
	 ⊃ cs' = cs .pc:= cs.pc(p; B13) .cmp:= cs.cmp(p ; 0) ; cs' = cs .pc:= cs.pc(p; B13) .cmp:= cs.cmp(p ; 1));
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p120 :
	⊦ COP(p, p120)(cs, cs') ↔ cs .pc(p) = B13 ∧ cs' = cs .pc:= cs.pc(p ; B14) ∧ cs .cmp(p) = 1;
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p121 :
	⊦ COP(p, p121)(cs, cs') ↔ cs .pc(p) = B13 ∧ cs' = cs .pc:= cs.pc(p ; B27) ∧ cs .cmp(p) = 0;
	used for : s, ls;

;;	%5 = load i8** @flag1, align 4
	p122 :
	⊦ COP(p, p122)(cs, cs') ↔ cs .pc(p) = B14 ∧ cs' = cs .pc:= cs.pc(p ; B15) .v5:= cs.v5(p ; cs.mem[cs .flag1 .v]);
	used for : s, ls;

;;	br label %while.cond
	p123 :
	⊦ COP(p, p123)(cs, cs') ↔ cs .pc(p) = B27 ∧ cs' = cs .pc:= cs.pc(p ; B03);
	used for : s, ls;

;;	store i8 0, i8* %5, align 1
	p124 :
	⊦ COP(p, p124)(cs, cs') ↔ cs .pc(p) = B15 ∧ cs' = cs .pc:= cs.pc(p ; B16);
	used for : s, ls;

;;	br label %while.cond3
	p125 :
	⊦ COP(p, p125)(cs, cs') ↔ cs .pc(p) = B16 ∧ cs' = cs .pc:= cs.pc(p ; B17);
	used for : s, ls;

;;	%6 = load i8** @turn, align 4
	p126 :
	⊦ COP(p, p126)(cs, cs') ↔ cs .pc(p) = B17 ∧ cs' = cs .pc:= cs.pc(p ; B18) .v6:= cs.v6(p ; cs.mem[cs .turn .v]);
	used for : s, ls;

;;	%7 = load i8* %6, align 1
	p127 :
	⊦ COP(p, p127)(cs, cs') ↔ cs .pc(p) = B18 ∧ cs' = cs .pc:= cs.pc(p ; B19) .v7:= cs.v7(p ; cs.mem[cs .v6(p) .v] .v);
	used for : s, ls;

;;	%tobool4 = trunc i8 %7 to i1
	p128 :
	⊦ COP(p, p128)(cs, cs') ↔ cs .pc(p) = B19 ∧ cs' = cs .pc:= cs.pc(p ; B20) .tobool4:= cs.tobool4(p ; cs .v7(p));
	used for : s, ls;

;;	%conv5 = zext i1 %tobool4 to i32
	p129 :
	⊦ COP(p, p129)(cs, cs') ↔ cs .pc(p) = B20 ∧ cs' = cs .pc:= cs.pc(p ; B21) .conv5:= cs.conv5(p ; cs .tobool4(p));
	used for : s, ls;

;;	%cmp6 = icmp ne i32 %conv5, 1
	p130 :
	⊦ COP(p, p130)(cs, cs') ↔ cs .pc(p) = B21 ∧ (cs .conv5(p) = 1
	 ⊃ cs' = cs .pc:= cs.pc(p; B22) .cmp6:= cs.cmp6(p ; 0) ; cs' = cs .pc:= cs.pc(p; B22) .cmp6:= cs.cmp6(p ; 1));
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p131 :
	⊦ COP(p, p131)(cs, cs') ↔ cs .pc(p) = B22 ∧ cs' = cs .pc:= cs.pc(p ; B23) ∧ cs .cmp6(p) = 1;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p132 :
	⊦ COP(p, p132)(cs, cs') ↔ cs .pc(p) = B22 ∧ cs' = cs .pc:= cs.pc(p ; B24) ∧ cs .cmp6(p) = 0;
	used for : s, ls;

;;	br label %while.cond3
	p133 :
	⊦ COP(p, p133)(cs, cs') ↔ cs .pc(p) = B23 ∧ cs' = cs .pc:= cs.pc(p ; B17);
	used for : s, ls;

;;	%8 = load i8** @flag1, align 4
	p134 :
	⊦ COP(p, p134)(cs, cs') ↔ cs .pc(p) = B24 ∧ cs' = cs .pc:= cs.pc(p ; B25) .v8:= cs.v8(p ; cs.mem[cs .flag1 .v]);
	used for : s, ls;

;;	store i8 1, i8* %8, align 1
	p135 :
	⊦ COP(p, p135)(cs, cs') ↔ cs .pc(p) = B25 ∧ cs' = cs .pc:= cs.pc(p ; B26);
	used for : s, ls;

;;	br label %if.end
	p136 :
	⊦ COP(p, p136)(cs, cs') ↔ cs .pc(p) = B26 ∧ cs' = cs .pc:= cs.pc(p ; B27);
	used for : s, ls;

;;	ret void
	p019ret :
	⊦ RETOP(p, p019ret)(cs, cs', return) ↔ cs .pc(p) = A32 ∧ cs' = cs .pc:= cs.pc(p ; N);
	used for : s, ls;
	
;;	ret void
	p119ret :
	⊦ RETOP(p, p119ret)(cs, cs', return) ↔ cs .pc(p) = B32 ∧ cs' = cs .pc:= cs.pc(p ; N);
	used for : s, ls;
	
;;	ret i32 0
	main1ret :
	⊦ RETOP(p, main1ret)(cs, cs', return) ↔ cs .pc(p) = C0 ∧ cs' = cs .pc:= cs.pc(p ; N) ∧ return = 0;
	used for : s, ls;
	
end enrich
