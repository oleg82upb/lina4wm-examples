enrich 	natref-memory,
		localstate,
		cindex with 

	constants
		flag0 : ref;
		flag1 : ref;
		turn : ref;
	
	functions
		INVOP : IJ → nat ×  memory ×  Localstate ×  memory ×  Localstate → bool;
		COP : CJ → memory × Localstate × memory × Localstate → bool;
		RETOP : RJ → memory × Localstate × memory × Localstate × nat → bool;
	predicates
		LSInit : Localstate × PID;
		GSInit : memory;
	variables
		invop : nat × memory × Localstate × memory × Localstate → bool;
		cop : memory × Localstate × memory × Localstate → bool;
		retop : memory × Localstate × memory × Localstate × nat → bool;
		mem' : memory;
		inp : nat;
		return : nat;
	axioms

	LSInit : ⊦ LSInit(ls, p) ↔ ls .pc = N ∧ ls .pid = p;
	used for : s, ls;

;; 	p0 reflects function @p0
	p0ini :
	⊦ INVOP(p0ini)(inp, mem, ls, mem', ls') ↔ ls .pc = N ∧ ls' = ls .pc:= A00 ∧ mem' = mem; 
	used for : s, ls;

;; 	p1 reflects function @p1
	p1ini :
	⊦ INVOP(p1ini)(inp, mem, ls, mem', ls') ↔ ls .pc = N ∧ ls' = ls .pc:= B00 ∧ mem' = mem; 
	used for : s, ls;

;; 	main reflects function @main
	mainini :
	⊦ INVOP(mainini)(inp, mem, ls, mem', ls') ↔ ls .pc = N ∧ ls' = ls .pc:= C0 ∧ mem' = mem; 
	used for : s, ls;

;;	%0 = load i8**@flag0, align 4
	p01 :
	⊦ COP(p01)(mem, ls, mem', ls') ↔ ls .pc = A00 ∧ ls' = ls .pc:= A01 .v0:= mem[flag0 .v] ∧ mem' = mem;
	used for : s, ls;

;;	store i81, i8*%0, align 1
	p02 :
	⊦ COP(p02)(mem, ls, mem', ls') ↔ ls .pc = A01 ∧ ls' = ls .pc:= A02v0 ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond
	p03 :
	⊦ COP(p03)(mem, ls, mem', ls') ↔ ls .pc = A02v0 ∧ ls' = ls .pc:= A03v0;
	used for : s, ls;

;;	FlushTransition
	p04 :
	⊦ COP(p04)(mem, ls, mem', ls') ↔ ls .pc = A02v0 ∧ ls' = ls .pc:= A02 ∧ mem' = mem[ ls .v0 .v ,⌜1⌝];
	used for : s, ls;

;;	FlushTransition
	p05 :
	⊦ COP(p05)(mem, ls, mem', ls') ↔ ls .pc = A03v0 ∧ ls' = ls .pc:= A03 ∧ mem' = mem[ ls .v0 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %while.cond
	p06 :
	⊦ COP(p06)(mem, ls, mem', ls') ↔ ls .pc = A02 ∧ ls' = ls .pc:= A03;
	used for : s, ls;

;;	fence seq_cst
	p07 :
	⊦ COP(p07)(mem, ls, mem', ls') ↔ ls .pc = A03 ∧ ls' = ls .pc:= A04 ∧ mem' = mem;
	used for : s, ls;

;;	%1 = load i8**@flag1, align 4
	p08 :
	⊦ COP(p08)(mem, ls, mem', ls') ↔ ls .pc = A04 ∧ ls' = ls .pc:= A05 .v1:= mem[flag1 .v] ∧ mem' = mem;
	used for : s, ls;

;;	%2 = load i8*%1, align 1
	p09 :
	⊦ COP(p09)(mem, ls, mem', ls') ↔ ls .pc = A05 ∧ ls' = ls .pc:= A06 .v2:= mem[ls .v1 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%tobool = trunc i8 %2 to i1
	p010 :
	⊦ COP(p010)(mem, ls, mem', ls') ↔ ls .pc = A06 ∧ ls' = ls .pc:= A07 .tobool:= ls .v2 ∧ mem' = mem;
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p011 :
	⊦ COP(p011)(mem, ls, mem', ls') ↔ ls .pc = A07 ∧ ls' = ls .pc:= A08 ∧ ls .tobool = 1;
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p012 :
	⊦ COP(p012)(mem, ls, mem', ls') ↔ ls .pc = A07 ∧ ls' = ls .pc:= A28 ∧ ls .tobool = 0;
	used for : s, ls;

;;	%3 = load i8**@turn, align 4
	p013 :
	⊦ COP(p013)(mem, ls, mem', ls') ↔ ls .pc = A08 ∧ ls' = ls .pc:= A09 .v3:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	%9 = load i8**@turn, align 4
	p014 :
	⊦ COP(p014)(mem, ls, mem', ls') ↔ ls .pc = A28 ∧ ls' = ls .pc:= A29 .v9:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	%4 = load i8*%3, align 1
	p015 :
	⊦ COP(p015)(mem, ls, mem', ls') ↔ ls .pc = A09 ∧ ls' = ls .pc:= A10 .v4:= mem[ls .v3 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	store i81, i8*%9, align 1
	p016 :
	⊦ COP(p016)(mem, ls, mem', ls') ↔ ls .pc = A29 ∧ ls' = ls .pc:= A30v9 ∧ mem' = mem;
	used for : s, ls;

;;	%tobool1 = trunc i8 %4 to i1
	p017 :
	⊦ COP(p017)(mem, ls, mem', ls') ↔ ls .pc = A10 ∧ ls' = ls .pc:= A11 .tobool1:= ls .v4 ∧ mem' = mem;
	used for : s, ls;

;;	%10 = load i8**@flag0, align 4
	p018 :
	⊦ COP(p018)(mem, ls, mem', ls') ↔ ls .pc = A30v9 ∧ ls' = ls .pc:= A31v9 .10:= mem[flag0 .v] ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p019 :
	⊦ COP(p019)(mem, ls, mem', ls') ↔ ls .pc = A30v9 ∧ ls' = ls .pc:= A30 ∧ mem' = mem[ ls .v9 .v ,⌜1⌝];
	used for : s, ls;

;;	%conv = zext i1 %tobool1 to i32
	p020 :
	⊦ COP(p020)(mem, ls, mem', ls') ↔ ls .pc = A11 ∧ ls' = ls .pc:= A12 .conv:= ls .tobool1 ∧ mem' = mem;
	used for : s, ls;

;;	store i80, i8*%10, align 1
	p021 :
	⊦ COP(p021)(mem, ls, mem', ls') ↔ ls .pc = A31v9 ∧ ls' = ls .pc:= A32v910 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p022 :
	⊦ COP(p022)(mem, ls, mem', ls') ↔ ls .pc = A31v9 ∧ ls' = ls .pc:= A31 ∧ mem' = mem[ ls .v9 .v ,⌜1⌝];
	used for : s, ls;

;;	%10 = load i8**@flag0, align 4
	p023 :
	⊦ COP(p023)(mem, ls, mem', ls') ↔ ls .pc = A30 ∧ ls' = ls .pc:= A31 .10:= mem[flag0 .v] ∧ mem' = mem;
	used for : s, ls;

;;	%cmp = icmp ne i32 %conv, 0
	p024 :
	⊦ COP(p024)(mem, ls, mem', ls') ↔ ls .pc = A12 ∧ (ls .conv = 0
	 ⊃ ls' = ls .pc:= A13 .cmp:= 0 ; ls' = ls .pc:= A13 .cmp:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p025 :
	⊦ COP(p025)(mem, ls, mem', ls') ↔ ls .pc = A32v910 ∧ ls' = ls .pc:= A3210 ∧ mem' = mem[ ls .v9 .v ,⌜1⌝];
	used for : s, ls;

;;	FlushTransition
	p026 :
	⊦ COP(p026)(mem, ls, mem', ls') ↔ ls .pc = A32v910 ∧ ls' = ls .pc:= A32v9 ∧ mem' = mem[ ls .10 .v ,⌜0⌝];
	used for : s, ls;

;;	store i80, i8*%10, align 1
	p027 :
	⊦ COP(p027)(mem, ls, mem', ls') ↔ ls .pc = A31 ∧ ls' = ls .pc:= A3210 ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p028 :
	⊦ COP(p028)(mem, ls, mem', ls') ↔ ls .pc = A13 ∧ ls' = ls .pc:= A14 ∧ ls .cmp = 1;
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p029 :
	⊦ COP(p029)(mem, ls, mem', ls') ↔ ls .pc = A13 ∧ ls' = ls .pc:= A27 ∧ ls .cmp = 0;
	used for : s, ls;

;;	FlushTransition
	p030 :
	⊦ COP(p030)(mem, ls, mem', ls') ↔ ls .pc = A3210 ∧ ls' = ls .pc:= A32 ∧ mem' = mem[ ls .10 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p031 :
	⊦ COP(p031)(mem, ls, mem', ls') ↔ ls .pc = A32v9 ∧ ls' = ls .pc:= A32 ∧ mem' = mem[ ls .v9 .v ,⌜1⌝];
	used for : s, ls;

;;	%5 = load i8**@flag0, align 4
	p032 :
	⊦ COP(p032)(mem, ls, mem', ls') ↔ ls .pc = A14 ∧ ls' = ls .pc:= A15 .v5:= mem[flag0 .v] ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond
	p033 :
	⊦ COP(p033)(mem, ls, mem', ls') ↔ ls .pc = A27 ∧ ls' = ls .pc:= A03;
	used for : s, ls;

;;	store i80, i8*%5, align 1
	p035 :
	⊦ COP(p035)(mem, ls, mem', ls') ↔ ls .pc = A15 ∧ ls' = ls .pc:= A16v5 ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond3
	p036 :
	⊦ COP(p036)(mem, ls, mem', ls') ↔ ls .pc = A16v5 ∧ ls' = ls .pc:= A17v5;
	used for : s, ls;

;;	FlushTransition
	p037 :
	⊦ COP(p037)(mem, ls, mem', ls') ↔ ls .pc = A16v5 ∧ ls' = ls .pc:= A16 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%6 = load i8**@turn, align 4
	p038 :
	⊦ COP(p038)(mem, ls, mem', ls') ↔ ls .pc = A17v5 ∧ ls' = ls .pc:= A18v5 .v6:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p039 :
	⊦ COP(p039)(mem, ls, mem', ls') ↔ ls .pc = A17v5 ∧ ls' = ls .pc:= A17 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	br label %while.cond3
	p040 :
	⊦ COP(p040)(mem, ls, mem', ls') ↔ ls .pc = A16 ∧ ls' = ls .pc:= A17;
	used for : s, ls;

;;	%7 = load i8*%6, align 1
	p041 :
	⊦ COP(p041)(mem, ls, mem', ls') ↔ ls .pc = A18v5 ∧ ls' = ls .pc:= A19v5 .v7:= mem[ls .v6 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p042 :
	⊦ COP(p042)(mem, ls, mem', ls') ↔ ls .pc = A18v5 ∧ ls' = ls .pc:= A18 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%6 = load i8**@turn, align 4
	p043 :
	⊦ COP(p043)(mem, ls, mem', ls') ↔ ls .pc = A17 ∧ ls' = ls .pc:= A18 .v6:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	%tobool4 = trunc i8 %7 to i1
	p044 :
	⊦ COP(p044)(mem, ls, mem', ls') ↔ ls .pc = A19v5 ∧ ls' = ls .pc:= A20v5 .tobool4:= ls .v7 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p045 :
	⊦ COP(p045)(mem, ls, mem', ls') ↔ ls .pc = A19v5 ∧ ls' = ls .pc:= A19 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%7 = load i8*%6, align 1
	p046 :
	⊦ COP(p046)(mem, ls, mem', ls') ↔ ls .pc = A18 ∧ ls' = ls .pc:= A19 .v7:= mem[ls .v6 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%conv5 = zext i1 %tobool4 to i32
	p047 :
	⊦ COP(p047)(mem, ls, mem', ls') ↔ ls .pc = A20v5 ∧ ls' = ls .pc:= A21v5 .conv5:= ls .tobool4 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p048 :
	⊦ COP(p048)(mem, ls, mem', ls') ↔ ls .pc = A20v5 ∧ ls' = ls .pc:= A20 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%tobool4 = trunc i8 %7 to i1
	p049 :
	⊦ COP(p049)(mem, ls, mem', ls') ↔ ls .pc = A19 ∧ ls' = ls .pc:= A20 .tobool4:= ls .v7 ∧ mem' = mem;
	used for : s, ls;

;;	%cmp6 = icmp ne i32 %conv5, 0
	p050 :
	⊦ COP(p050)(mem, ls, mem', ls') ↔ ls .pc = A21v5 ∧ (ls .conv5 = 0
	 ⊃ ls' = ls .pc:= A22v5 .cmp6:= 0 ; ls' = ls .pc:= A22v5 .cmp6:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p051 :
	⊦ COP(p051)(mem, ls, mem', ls') ↔ ls .pc = A21v5 ∧ ls' = ls .pc:= A21 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%conv5 = zext i1 %tobool4 to i32
	p052 :
	⊦ COP(p052)(mem, ls, mem', ls') ↔ ls .pc = A20 ∧ ls' = ls .pc:= A21 .conv5:= ls .tobool4 ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p053 :
	⊦ COP(p053)(mem, ls, mem', ls') ↔ ls .pc = A22v5 ∧ ls' = ls .pc:= A23v5 ∧ ls .cmp6 = 1;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p054 :
	⊦ COP(p054)(mem, ls, mem', ls') ↔ ls .pc = A22v5 ∧ ls' = ls .pc:= A24v5 ∧ ls .cmp6 = 0;
	used for : s, ls;

;;	FlushTransition
	p055 :
	⊦ COP(p055)(mem, ls, mem', ls') ↔ ls .pc = A22v5 ∧ ls' = ls .pc:= A22 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%cmp6 = icmp ne i32 %conv5, 0
	p056 :
	⊦ COP(p056)(mem, ls, mem', ls') ↔ ls .pc = A21 ∧ (ls .conv5 = 0
	 ⊃ ls' = ls .pc:= A22 .cmp6:= 0 ; ls' = ls .pc:= A22 .cmp6:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond3
	p057 :
	⊦ COP(p057)(mem, ls, mem', ls') ↔ ls .pc = A23v5 ∧ ls' = ls .pc:= A17v5;
	used for : s, ls;

;;	FlushTransition
	p058 :
	⊦ COP(p058)(mem, ls, mem', ls') ↔ ls .pc = A23v5 ∧ ls' = ls .pc:= A23 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%8 = load i8**@flag0, align 4
	p059 :
	⊦ COP(p059)(mem, ls, mem', ls') ↔ ls .pc = A24v5 ∧ ls' = ls .pc:= A25v5 .v8:= mem[flag0 .v] ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p060 :
	⊦ COP(p060)(mem, ls, mem', ls') ↔ ls .pc = A24v5 ∧ ls' = ls .pc:= A24 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p061 :
	⊦ COP(p061)(mem, ls, mem', ls') ↔ ls .pc = A22 ∧ ls' = ls .pc:= A23 ∧ ls .cmp6 = 1;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p062 :
	⊦ COP(p062)(mem, ls, mem', ls') ↔ ls .pc = A22 ∧ ls' = ls .pc:= A24 ∧ ls .cmp6 = 0;
	used for : s, ls;

;;	br label %while.cond3
	p063 :
	⊦ COP(p063)(mem, ls, mem', ls') ↔ ls .pc = A23 ∧ ls' = ls .pc:= A17;
	used for : s, ls;

;;	store i81, i8*%8, align 1
	p064 :
	⊦ COP(p064)(mem, ls, mem', ls') ↔ ls .pc = A25v5 ∧ ls' = ls .pc:= A26v5v8 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p065 :
	⊦ COP(p065)(mem, ls, mem', ls') ↔ ls .pc = A25v5 ∧ ls' = ls .pc:= A25 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%8 = load i8**@flag0, align 4
	p066 :
	⊦ COP(p066)(mem, ls, mem', ls') ↔ ls .pc = A24 ∧ ls' = ls .pc:= A25 .v8:= mem[flag0 .v] ∧ mem' = mem;
	used for : s, ls;

;;	br label %if.end
	p067 :
	⊦ COP(p067)(mem, ls, mem', ls') ↔ ls .pc = A26v5v8 ∧ ls' = ls .pc:= A27v5v8;
	used for : s, ls;

;;	FlushTransition
	p068 :
	⊦ COP(p068)(mem, ls, mem', ls') ↔ ls .pc = A26v5v8 ∧ ls' = ls .pc:= A26v8 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p069 :
	⊦ COP(p069)(mem, ls, mem', ls') ↔ ls .pc = A26v5v8 ∧ ls' = ls .pc:= A26v5 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	store i81, i8*%8, align 1
	p070 :
	⊦ COP(p070)(mem, ls, mem', ls') ↔ ls .pc = A25 ∧ ls' = ls .pc:= A26v8 ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond
	p071 :
	⊦ COP(p071)(mem, ls, mem', ls') ↔ ls .pc = A27v5v8 ∧ ls' = ls .pc:= A03v5v8;
	used for : s, ls;

;;	FlushTransition
	p072 :
	⊦ COP(p072)(mem, ls, mem', ls') ↔ ls .pc = A27v5v8 ∧ ls' = ls .pc:= A27v8 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p073 :
	⊦ COP(p073)(mem, ls, mem', ls') ↔ ls .pc = A27v5v8 ∧ ls' = ls .pc:= A27v5 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %if.end
	p074 :
	⊦ COP(p074)(mem, ls, mem', ls') ↔ ls .pc = A26v8 ∧ ls' = ls .pc:= A27v8;
	used for : s, ls;

;;	FlushTransition
	p075 :
	⊦ COP(p075)(mem, ls, mem', ls') ↔ ls .pc = A26v8 ∧ ls' = ls .pc:= A26 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %if.end
	p076 :
	⊦ COP(p076)(mem, ls, mem', ls') ↔ ls .pc = A26v5 ∧ ls' = ls .pc:= A27v5;
	used for : s, ls;

;;	FlushTransition
	p077 :
	⊦ COP(p077)(mem, ls, mem', ls') ↔ ls .pc = A26v5 ∧ ls' = ls .pc:= A26 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p078 :
	⊦ COP(p078)(mem, ls, mem', ls') ↔ ls .pc = A03v5v8 ∧ ls' = ls .pc:= A03v8 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p079 :
	⊦ COP(p079)(mem, ls, mem', ls') ↔ ls .pc = A03v5v8 ∧ ls' = ls .pc:= A03v5 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %while.cond
	p080 :
	⊦ COP(p080)(mem, ls, mem', ls') ↔ ls .pc = A27v8 ∧ ls' = ls .pc:= A03v8;
	used for : s, ls;

;;	FlushTransition
	p081 :
	⊦ COP(p081)(mem, ls, mem', ls') ↔ ls .pc = A27v8 ∧ ls' = ls .pc:= A27 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %while.cond
	p082 :
	⊦ COP(p082)(mem, ls, mem', ls') ↔ ls .pc = A27v5 ∧ ls' = ls .pc:= A03v5;
	used for : s, ls;

;;	FlushTransition
	p083 :
	⊦ COP(p083)(mem, ls, mem', ls') ↔ ls .pc = A27v5 ∧ ls' = ls .pc:= A27 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	br label %if.end
	p084 :
	⊦ COP(p084)(mem, ls, mem', ls') ↔ ls .pc = A26 ∧ ls' = ls .pc:= A27;
	used for : s, ls;

;;	FlushTransition
	p085 :
	⊦ COP(p085)(mem, ls, mem', ls') ↔ ls .pc = A03v8 ∧ ls' = ls .pc:= A03 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	FlushTransition
	p086 :
	⊦ COP(p086)(mem, ls, mem', ls') ↔ ls .pc = A03v5 ∧ ls' = ls .pc:= A03 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%0 = load i8**@flag1, align 4
	p11 :
	⊦ COP(p11)(mem, ls, mem', ls') ↔ ls .pc = B00 ∧ ls' = ls .pc:= B01 .v0:= mem[flag1 .v] ∧ mem' = mem;
	used for : s, ls;

;;	store i81, i8*%0, align 1
	p12 :
	⊦ COP(p12)(mem, ls, mem', ls') ↔ ls .pc = B01 ∧ ls' = ls .pc:= B02v0 ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond
	p13 :
	⊦ COP(p13)(mem, ls, mem', ls') ↔ ls .pc = B02v0 ∧ ls' = ls .pc:= B03v0;
	used for : s, ls;

;;	FlushTransition
	p14 :
	⊦ COP(p14)(mem, ls, mem', ls') ↔ ls .pc = B02v0 ∧ ls' = ls .pc:= B02 ∧ mem' = mem[ ls .v0 .v ,⌜1⌝];
	used for : s, ls;

;;	FlushTransition
	p15 :
	⊦ COP(p15)(mem, ls, mem', ls') ↔ ls .pc = B03v0 ∧ ls' = ls .pc:= B03 ∧ mem' = mem[ ls .v0 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %while.cond
	p16 :
	⊦ COP(p16)(mem, ls, mem', ls') ↔ ls .pc = B02 ∧ ls' = ls .pc:= B03;
	used for : s, ls;

;;	fence seq_cst
	p17 :
	⊦ COP(p17)(mem, ls, mem', ls') ↔ ls .pc = B03 ∧ ls' = ls .pc:= B04 ∧ mem' = mem;
	used for : s, ls;

;;	%1 = load i8**@flag0, align 4
	p18 :
	⊦ COP(p18)(mem, ls, mem', ls') ↔ ls .pc = B04 ∧ ls' = ls .pc:= B05 .v1:= mem[flag0 .v] ∧ mem' = mem;
	used for : s, ls;

;;	%2 = load i8*%1, align 1
	p19 :
	⊦ COP(p19)(mem, ls, mem', ls') ↔ ls .pc = B05 ∧ ls' = ls .pc:= B06 .v2:= mem[ls .v1 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%tobool = trunc i8 %2 to i1
	p110 :
	⊦ COP(p110)(mem, ls, mem', ls') ↔ ls .pc = B06 ∧ ls' = ls .pc:= B07 .tobool:= ls .v2 ∧ mem' = mem;
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p111 :
	⊦ COP(p111)(mem, ls, mem', ls') ↔ ls .pc = B07 ∧ ls' = ls .pc:= B08 ∧ ls .tobool = 1;
	used for : s, ls;

;;	br %tobool, label %while.body, label %while.end9
	p112 :
	⊦ COP(p112)(mem, ls, mem', ls') ↔ ls .pc = B07 ∧ ls' = ls .pc:= B28 ∧ ls .tobool = 0;
	used for : s, ls;

;;	%3 = load i8**@turn, align 4
	p113 :
	⊦ COP(p113)(mem, ls, mem', ls') ↔ ls .pc = B08 ∧ ls' = ls .pc:= B09 .v3:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	%9 = load i8**@turn, align 4
	p114 :
	⊦ COP(p114)(mem, ls, mem', ls') ↔ ls .pc = B28 ∧ ls' = ls .pc:= B29 .v9:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	%4 = load i8*%3, align 1
	p115 :
	⊦ COP(p115)(mem, ls, mem', ls') ↔ ls .pc = B09 ∧ ls' = ls .pc:= B10 .v4:= mem[ls .v3 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	store i80, i8*%9, align 1
	p116 :
	⊦ COP(p116)(mem, ls, mem', ls') ↔ ls .pc = B29 ∧ ls' = ls .pc:= B30v9 ∧ mem' = mem;
	used for : s, ls;

;;	%tobool1 = trunc i8 %4 to i1
	p117 :
	⊦ COP(p117)(mem, ls, mem', ls') ↔ ls .pc = B10 ∧ ls' = ls .pc:= B11 .tobool1:= ls .v4 ∧ mem' = mem;
	used for : s, ls;

;;	%10 = load i8**@flag1, align 4
	p118 :
	⊦ COP(p118)(mem, ls, mem', ls') ↔ ls .pc = B30v9 ∧ ls' = ls .pc:= B31v9 .10:= mem[flag1 .v] ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p119 :
	⊦ COP(p119)(mem, ls, mem', ls') ↔ ls .pc = B30v9 ∧ ls' = ls .pc:= B30 ∧ mem' = mem[ ls .v9 .v ,⌜0⌝];
	used for : s, ls;

;;	%conv = zext i1 %tobool1 to i32
	p120 :
	⊦ COP(p120)(mem, ls, mem', ls') ↔ ls .pc = B11 ∧ ls' = ls .pc:= B12 .conv:= ls .tobool1 ∧ mem' = mem;
	used for : s, ls;

;;	store i80, i8*%10, align 1
	p121 :
	⊦ COP(p121)(mem, ls, mem', ls') ↔ ls .pc = B31v9 ∧ ls' = ls .pc:= B32v910 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p122 :
	⊦ COP(p122)(mem, ls, mem', ls') ↔ ls .pc = B31v9 ∧ ls' = ls .pc:= B31 ∧ mem' = mem[ ls .v9 .v ,⌜0⌝];
	used for : s, ls;

;;	%10 = load i8**@flag1, align 4
	p123 :
	⊦ COP(p123)(mem, ls, mem', ls') ↔ ls .pc = B30 ∧ ls' = ls .pc:= B31 .10:= mem[flag1 .v] ∧ mem' = mem;
	used for : s, ls;

;;	%cmp = icmp ne i32 %conv, 1
	p124 :
	⊦ COP(p124)(mem, ls, mem', ls') ↔ ls .pc = B12 ∧ (ls .conv = 1
	 ⊃ ls' = ls .pc:= B13 .cmp:= 0 ; ls' = ls .pc:= B13 .cmp:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p125 :
	⊦ COP(p125)(mem, ls, mem', ls') ↔ ls .pc = B32v910 ∧ ls' = ls .pc:= B3210 ∧ mem' = mem[ ls .v9 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p126 :
	⊦ COP(p126)(mem, ls, mem', ls') ↔ ls .pc = B32v910 ∧ ls' = ls .pc:= B32v9 ∧ mem' = mem[ ls .10 .v ,⌜0⌝];
	used for : s, ls;

;;	store i80, i8*%10, align 1
	p127 :
	⊦ COP(p127)(mem, ls, mem', ls') ↔ ls .pc = B31 ∧ ls' = ls .pc:= B3210 ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p128 :
	⊦ COP(p128)(mem, ls, mem', ls') ↔ ls .pc = B13 ∧ ls' = ls .pc:= B14 ∧ ls .cmp = 1;
	used for : s, ls;

;;	br %cmp, label %if.then, label %if.end
	p129 :
	⊦ COP(p129)(mem, ls, mem', ls') ↔ ls .pc = B13 ∧ ls' = ls .pc:= B27 ∧ ls .cmp = 0;
	used for : s, ls;

;;	FlushTransition
	p130 :
	⊦ COP(p130)(mem, ls, mem', ls') ↔ ls .pc = B3210 ∧ ls' = ls .pc:= B32 ∧ mem' = mem[ ls .10 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p131 :
	⊦ COP(p131)(mem, ls, mem', ls') ↔ ls .pc = B32v9 ∧ ls' = ls .pc:= B32 ∧ mem' = mem[ ls .v9 .v ,⌜0⌝];
	used for : s, ls;

;;	%5 = load i8**@flag1, align 4
	p132 :
	⊦ COP(p132)(mem, ls, mem', ls') ↔ ls .pc = B14 ∧ ls' = ls .pc:= B15 .v5:= mem[flag1 .v] ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond
	p133 :
	⊦ COP(p133)(mem, ls, mem', ls') ↔ ls .pc = B27 ∧ ls' = ls .pc:= B03;
	used for : s, ls;

;;	store i80, i8*%5, align 1
	p135 :
	⊦ COP(p135)(mem, ls, mem', ls') ↔ ls .pc = B15 ∧ ls' = ls .pc:= B16v5 ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond3
	p136 :
	⊦ COP(p136)(mem, ls, mem', ls') ↔ ls .pc = B16v5 ∧ ls' = ls .pc:= B17v5;
	used for : s, ls;

;;	FlushTransition
	p137 :
	⊦ COP(p137)(mem, ls, mem', ls') ↔ ls .pc = B16v5 ∧ ls' = ls .pc:= B16 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%6 = load i8**@turn, align 4
	p138 :
	⊦ COP(p138)(mem, ls, mem', ls') ↔ ls .pc = B17v5 ∧ ls' = ls .pc:= B18v5 .v6:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p139 :
	⊦ COP(p139)(mem, ls, mem', ls') ↔ ls .pc = B17v5 ∧ ls' = ls .pc:= B17 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	br label %while.cond3
	p140 :
	⊦ COP(p140)(mem, ls, mem', ls') ↔ ls .pc = B16 ∧ ls' = ls .pc:= B17;
	used for : s, ls;

;;	%7 = load i8*%6, align 1
	p141 :
	⊦ COP(p141)(mem, ls, mem', ls') ↔ ls .pc = B18v5 ∧ ls' = ls .pc:= B19v5 .v7:= mem[ls .v6 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p142 :
	⊦ COP(p142)(mem, ls, mem', ls') ↔ ls .pc = B18v5 ∧ ls' = ls .pc:= B18 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%6 = load i8**@turn, align 4
	p143 :
	⊦ COP(p143)(mem, ls, mem', ls') ↔ ls .pc = B17 ∧ ls' = ls .pc:= B18 .v6:= mem[turn .v] ∧ mem' = mem;
	used for : s, ls;

;;	%tobool4 = trunc i8 %7 to i1
	p144 :
	⊦ COP(p144)(mem, ls, mem', ls') ↔ ls .pc = B19v5 ∧ ls' = ls .pc:= B20v5 .tobool4:= ls .v7 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p145 :
	⊦ COP(p145)(mem, ls, mem', ls') ↔ ls .pc = B19v5 ∧ ls' = ls .pc:= B19 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%7 = load i8*%6, align 1
	p146 :
	⊦ COP(p146)(mem, ls, mem', ls') ↔ ls .pc = B18 ∧ ls' = ls .pc:= B19 .v7:= mem[ls .v6 .v] .v ∧ mem' = mem;
	used for : s, ls;

;;	%conv5 = zext i1 %tobool4 to i32
	p147 :
	⊦ COP(p147)(mem, ls, mem', ls') ↔ ls .pc = B20v5 ∧ ls' = ls .pc:= B21v5 .conv5:= ls .tobool4 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p148 :
	⊦ COP(p148)(mem, ls, mem', ls') ↔ ls .pc = B20v5 ∧ ls' = ls .pc:= B20 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%tobool4 = trunc i8 %7 to i1
	p149 :
	⊦ COP(p149)(mem, ls, mem', ls') ↔ ls .pc = B19 ∧ ls' = ls .pc:= B20 .tobool4:= ls .v7 ∧ mem' = mem;
	used for : s, ls;

;;	%cmp6 = icmp ne i32 %conv5, 1
	p150 :
	⊦ COP(p150)(mem, ls, mem', ls') ↔ ls .pc = B21v5 ∧ (ls .conv5 = 1
	 ⊃ ls' = ls .pc:= B22v5 .cmp6:= 0 ; ls' = ls .pc:= B22v5 .cmp6:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p151 :
	⊦ COP(p151)(mem, ls, mem', ls') ↔ ls .pc = B21v5 ∧ ls' = ls .pc:= B21 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%conv5 = zext i1 %tobool4 to i32
	p152 :
	⊦ COP(p152)(mem, ls, mem', ls') ↔ ls .pc = B20 ∧ ls' = ls .pc:= B21 .conv5:= ls .tobool4 ∧ mem' = mem;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p153 :
	⊦ COP(p153)(mem, ls, mem', ls') ↔ ls .pc = B22v5 ∧ ls' = ls .pc:= B23v5 ∧ ls .cmp6 = 1;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p154 :
	⊦ COP(p154)(mem, ls, mem', ls') ↔ ls .pc = B22v5 ∧ ls' = ls .pc:= B24v5 ∧ ls .cmp6 = 0;
	used for : s, ls;

;;	FlushTransition
	p155 :
	⊦ COP(p155)(mem, ls, mem', ls') ↔ ls .pc = B22v5 ∧ ls' = ls .pc:= B22 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%cmp6 = icmp ne i32 %conv5, 1
	p156 :
	⊦ COP(p156)(mem, ls, mem', ls') ↔ ls .pc = B21 ∧ (ls .conv5 = 1
	 ⊃ ls' = ls .pc:= B22 .cmp6:= 0 ; ls' = ls .pc:= B22 .cmp6:= 1) ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond3
	p157 :
	⊦ COP(p157)(mem, ls, mem', ls') ↔ ls .pc = B23v5 ∧ ls' = ls .pc:= B17v5;
	used for : s, ls;

;;	FlushTransition
	p158 :
	⊦ COP(p158)(mem, ls, mem', ls') ↔ ls .pc = B23v5 ∧ ls' = ls .pc:= B23 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%8 = load i8**@flag1, align 4
	p159 :
	⊦ COP(p159)(mem, ls, mem', ls') ↔ ls .pc = B24v5 ∧ ls' = ls .pc:= B25v5 .v8:= mem[flag1 .v] ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p160 :
	⊦ COP(p160)(mem, ls, mem', ls') ↔ ls .pc = B24v5 ∧ ls' = ls .pc:= B24 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p161 :
	⊦ COP(p161)(mem, ls, mem', ls') ↔ ls .pc = B22 ∧ ls' = ls .pc:= B23 ∧ ls .cmp6 = 1;
	used for : s, ls;

;;	br %cmp6, label %while.body8, label %while.end
	p162 :
	⊦ COP(p162)(mem, ls, mem', ls') ↔ ls .pc = B22 ∧ ls' = ls .pc:= B24 ∧ ls .cmp6 = 0;
	used for : s, ls;

;;	br label %while.cond3
	p163 :
	⊦ COP(p163)(mem, ls, mem', ls') ↔ ls .pc = B23 ∧ ls' = ls .pc:= B17;
	used for : s, ls;

;;	store i81, i8*%8, align 1
	p164 :
	⊦ COP(p164)(mem, ls, mem', ls') ↔ ls .pc = B25v5 ∧ ls' = ls .pc:= B26v5v8 ∧ mem' = mem;
	used for : s, ls;

;;	FlushTransition
	p165 :
	⊦ COP(p165)(mem, ls, mem', ls') ↔ ls .pc = B25v5 ∧ ls' = ls .pc:= B25 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	%8 = load i8**@flag1, align 4
	p166 :
	⊦ COP(p166)(mem, ls, mem', ls') ↔ ls .pc = B24 ∧ ls' = ls .pc:= B25 .v8:= mem[flag1 .v] ∧ mem' = mem;
	used for : s, ls;

;;	br label %if.end
	p167 :
	⊦ COP(p167)(mem, ls, mem', ls') ↔ ls .pc = B26v5v8 ∧ ls' = ls .pc:= B27v5v8;
	used for : s, ls;

;;	FlushTransition
	p168 :
	⊦ COP(p168)(mem, ls, mem', ls') ↔ ls .pc = B26v5v8 ∧ ls' = ls .pc:= B26v8 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p169 :
	⊦ COP(p169)(mem, ls, mem', ls') ↔ ls .pc = B26v5v8 ∧ ls' = ls .pc:= B26v5 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	store i81, i8*%8, align 1
	p170 :
	⊦ COP(p170)(mem, ls, mem', ls') ↔ ls .pc = B25 ∧ ls' = ls .pc:= B26v8 ∧ mem' = mem;
	used for : s, ls;

;;	br label %while.cond
	p171 :
	⊦ COP(p171)(mem, ls, mem', ls') ↔ ls .pc = B27v5v8 ∧ ls' = ls .pc:= B03v5v8;
	used for : s, ls;

;;	FlushTransition
	p172 :
	⊦ COP(p172)(mem, ls, mem', ls') ↔ ls .pc = B27v5v8 ∧ ls' = ls .pc:= B27v8 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p173 :
	⊦ COP(p173)(mem, ls, mem', ls') ↔ ls .pc = B27v5v8 ∧ ls' = ls .pc:= B27v5 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %if.end
	p174 :
	⊦ COP(p174)(mem, ls, mem', ls') ↔ ls .pc = B26v8 ∧ ls' = ls .pc:= B27v8;
	used for : s, ls;

;;	FlushTransition
	p175 :
	⊦ COP(p175)(mem, ls, mem', ls') ↔ ls .pc = B26v8 ∧ ls' = ls .pc:= B26 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %if.end
	p176 :
	⊦ COP(p176)(mem, ls, mem', ls') ↔ ls .pc = B26v5 ∧ ls' = ls .pc:= B27v5;
	used for : s, ls;

;;	FlushTransition
	p177 :
	⊦ COP(p177)(mem, ls, mem', ls') ↔ ls .pc = B26v5 ∧ ls' = ls .pc:= B26 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p178 :
	⊦ COP(p178)(mem, ls, mem', ls') ↔ ls .pc = B03v5v8 ∧ ls' = ls .pc:= B03v8 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	FlushTransition
	p179 :
	⊦ COP(p179)(mem, ls, mem', ls') ↔ ls .pc = B03v5v8 ∧ ls' = ls .pc:= B03v5 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %while.cond
	p180 :
	⊦ COP(p180)(mem, ls, mem', ls') ↔ ls .pc = B27v8 ∧ ls' = ls .pc:= B03v8;
	used for : s, ls;

;;	FlushTransition
	p181 :
	⊦ COP(p181)(mem, ls, mem', ls') ↔ ls .pc = B27v8 ∧ ls' = ls .pc:= B27 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	br label %while.cond
	p182 :
	⊦ COP(p182)(mem, ls, mem', ls') ↔ ls .pc = B27v5 ∧ ls' = ls .pc:= B03v5;
	used for : s, ls;

;;	FlushTransition
	p183 :
	⊦ COP(p183)(mem, ls, mem', ls') ↔ ls .pc = B27v5 ∧ ls' = ls .pc:= B27 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	br label %if.end
	p184 :
	⊦ COP(p184)(mem, ls, mem', ls') ↔ ls .pc = B26 ∧ ls' = ls .pc:= B27;
	used for : s, ls;

;;	FlushTransition
	p185 :
	⊦ COP(p185)(mem, ls, mem', ls') ↔ ls .pc = B03v8 ∧ ls' = ls .pc:= B03 ∧ mem' = mem[ ls .v8 .v ,⌜1⌝];
	used for : s, ls;

;;	FlushTransition
	p186 :
	⊦ COP(p186)(mem, ls, mem', ls') ↔ ls .pc = B03v5 ∧ ls' = ls .pc:= B03 ∧ mem' = mem[ ls .v5 .v ,⌜0⌝];
	used for : s, ls;

;;	ret void
	p034ret :
	⊦ RETOP(p034ret)(mem, ls, mem', ls', return) ↔ ls .pc = A32 ∧ ls' = ls .pc:= N ∧ mem' = mem;
	used for : s, ls;
	
;;	ret void
	p134ret :
	⊦ RETOP(p134ret)(mem, ls, mem', ls', return) ↔ ls .pc = B32 ∧ ls' = ls .pc:= N ∧ mem' = mem;
	used for : s, ls;
	
;;	ret i320
	main1ret :
	⊦ RETOP(main1ret)(mem, ls, mem', ls', return) ↔ ls .pc = C0 ∧ ls' = ls .pc:= N ∧ return = 0 ∧ mem' = mem;
	used for : s, ls;
	
end enrich
		
